# Note: some types have an `id` field, but it's unique only in the context
# of the given competition, so they additionally define an _id field,
# which is unique and can be used by Apollo client as a cache key.

type Query {
	me: User
	competitions: Competitions!
	competition(id: ID!): Competition
	round(competitionId: ID!, roundId: String!): Round
	competitor(competitionId: ID!, competitorId: Int!): Person
	recentRecords: [Record!]!
}

type Mutation {
	signOut: Boolean!
	importCompetition(id: ID!): Competition
	synchronize(competitionId: ID!): Competition
	updateAccessSettings(
		competitionId: ID!
		accessSettings: AccessSettingsInput!
	): Competition
	signIn(competitionId: ID!, password: String!): Boolean!
	updateResult(
		competitionId: ID!
		roundId: String!
		result: ResultInput!
	): Round
	openRound(competitionId: ID!, roundId: String!): Round
	clearRound(competitionId: ID!, roundId: String!): Round
	quitCompetitor(
		competitionId: ID!
		roundId: String!
		competitorId: Int!
		replace: Boolean!
	): Round
	addCompetitor(
		competitionId: ID!
		roundId: String!
		competitorId: Int!
	): Round
}

type Subscription {
	roundUpdate(competitionId: ID!, roundId: String!): Round
}

type Competitions {
	upcoming: [Competition!]!
	inProgress: [Competition!]!
	past: [Competition!]!
}

type Record {
	competition: Competition!
	event: Event!
	round: Round!
	result: Result!
	type: String!
	recordTag: String!
	attemptResult: Int!
}

type User {
	id: ID!
	# WCA attributes
	wcaUserId: Int!
	wcaId: String
	name: String!
	avatar: Avatar!
	# Additional attributes
	importableCompetitions: [Competition!]!
	manageableCompetitions: [Competition!]!
}

type Avatar {
	url: String
	thumbUrl: String
}

type Competition {
	id: ID!
	name: String!
	events: [Event!]!
	schedule: Schedule!
	competitors: [Person!]!
	countries: [Country!]!
	synchronizedAt: String!
	# Finished final rounds including only podium results.
	podiums: [Round!]!
	scoretakers: [Person!]!
	passwordAuthEnabled: Boolean!
	currentUserManagerAccess: Boolean!
	currentUserScoretakerAccess: Boolean!
}

type Event {
	_id: ID!
	id: String!
	name: String!
	rounds: [Round!]!
}

type Round {
	_id: ID!
	id: String!
	name: String!
	label: String
	event: Event!
	format: Format!
	timeLimit: TimeLimit
	cutoff: Cutoff
	results: [Result!]!
	open: Boolean!
	finished: Boolean!
	active: Boolean!
	nextQualifying: [Person!] # People who would qualify to this round if one person quit.
	missingQualifying: MissingQualifying
	previous: Round
	next: Round
}

type Format {
	id: ID!
	name: String!
	shortName: String!
	solveCount: Int!
	sortBy: String!
}

type TimeLimit {
	centiseconds: Int!
	cumulativeRoundIds: [String!]!
}

type Cutoff {
	numberOfAttempts: Int!
	attemptResult: Int!
}

type Result {
	_id: ID!
	person: Person!
	ranking: Int
	attempts: [Int]!
	best: Int!
	average: Int!
	advancable: Boolean!
	round: Round!
	recordTags: RecordTags!
	updatedAt: String!
}

type RecordTags {
	single: String
	average: String
}

type MissingQualifying {
	# People who qualify to this round, but are not in it.
	qualifying: [Person!]!
	# People who would be removed if one qualifying person was added to the round.
	excess: [Person!]!
}

type Schedule {
	startDate: String!
	endDate: String!
	venues: [Venue!]!
}

type Venue {
	_id: ID!
	id: Int!
	name: String!
	rooms: [Room!]!
	latitude: Float!
	longitude: Float!
}

type Room {
	_id: ID!
	id: Int!
	name: String!
	color: String!
	activities: [Activity!]!
}

type Activity {
	_id: ID!
	id: Int!
	name: String!
	activityCode: String!
	startTime: String!
	endTime: String!
	childActivities: [Activity!]!
}

type Person {
	_id: ID!
	id: Int!
	name: String!
	wcaId: String
	country: Country!
	avatar: Avatar
	roles: [String!]!
	results: [Result!]!
}

type Country {
	iso2: String!
	name: String!
}

# Inputs

input ResultInput {
	personId: Int!
	attempts: [Int!]!
}

input AccessSettingsInput {
	scoretakerIds: [Int!]!
	passwordAuthEnabled: Boolean!
	password: String!
}
