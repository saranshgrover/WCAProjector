{"version":3,"sources":["server/wca-env.js","server/history.js","server/auth.js","components/common/Header.js","components/common/Footer.js","server/tools.js","server/wca-api.js","components/Competition/Dashboard/DashboardList.js","components/Competition/Notifications/Notifications.js","server/wcif.js","components/Competition/Overview/OverviewLogic.js","components/common/Error.js","components/Competition/Groups/GroupsUser.js","components/Competition/Groups/GroupsActivity.js","components/Competition/Groups/GroupsGeneral.js","components/Competition/Groups/Groups.js","components/common/EventList.js","components/Competition/Overview/OverviewFilterChips.js","components/Competition/Overview/Overview.js","components/Competition/Admin/ProjectorRoomAdmin.js","components/Competition/Admin/ProjectorAdmin.js","components/Competition/Admin/GeneralAdmin.js","components/Competition/Admin/NotificationsAdmin.js","components/Competition/Admin/Admin.js","components/common/MySnackbar.js","components/Competition/Competition.js","components/Competition/Dashboard/Dashboard.js","components/Landing/CompList.js","components/Landing/LandingSignedIn.js","components/Landing/WelcomeLanding.js","components/Projector/ProjectorLogic.js","components/Projector/Screens/AgendaScreen.js","components/Projector/Screens/GroupScreen.js","components/Projector/Screens/InfoScreen.js","components/Projector/Screens/ResultsScreen.js","components/Projector/Screens/SpotlightScreen.js","components/Projector/Projector.js","components/Landing/App.js","serviceWorker.js","index.js"],"names":["WCA_ORIGIN","WCA_OAUTH_CLIENT_ID","process","WCA_CLIENT_ID","history","createBrowserHistory","localStorageKey","key","wcaAccessToken","localStorage","getItem","signIn","params","URLSearchParams","client_id","response_type","redirect_uri","oauthRedirectUri","scope","window","location","toString","appUri","origin","console","log","search","has","signOut","removeItem","replace","isSignedIn","useStyles","makeStyles","theme","appBar","zIndex","drawer","title","textDecoration","color","flexGrow","marginLeft","spacing","titleIcon","marginRight","username","Header","setMobileOpen","userInfo","onSignOut","classes","AppBar","position","className","Toolbar","isMobile","IconButton","onClick","size","Typography","variant","component","Link","to","name","Button","me","root","bottom","width","overflow","padding","grow","link","verticalAlign","fontWeight","opacity","Footer","currTheme","onThemeChange","Grid","container","item","Tooltip","href","version","updateIn","object","updater","property","properyChain","length","mapIn","mapper","array","map","setIn","value","sortOutput","a","b","sortArrayByDate","arr","sort","Date","start_date","compDatesToString","start","end","today","moment","isSame","Math","floor","duration","diff","asDays","format","getWcifPublic","competitionId","wcaApiFetch","getWcif","getMyUpcomingComps","userId","getMyManagableComps","startOf","managed_by_me","toISOString","path","fetchOptions","baseApiUrl","fetch","Object","assign","headers","Headers","Authorization","then","response","ok","Error","statusText","json","saveWcifChanges","previousWcif","newWcif","wcif","obj","keysDiff","keys","filter","Promise","resolve","id","reduce","newObj","method","body","JSON","stringify","DashboardList","user","getIcon","text","style","marginTop","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","Notifications","getExtensionId","extensionName","buildExtension","data","specUrl","setExtensionData","wcifEntity","otherExtensions","extensions","extension","defaultExtensionData","GeneralConfig","useProjector","useGroups","groupTool","useTelegramNotif","logoLink","undefined","channelName","ScheduleConfig","delay","currentActivity","pinnedMessage","groupUpdate","getExtensionData","find","defaultData","isExtensionSetup","wcifEntitiy","getMyAssignmentsInOrder","wcaId","isWcaId","test","persons","person","wcaUserId","parseInt","userAssignments","assignments","schedule","activity1","activity2","aTime","bTime","venues","forEach","venue","rooms","room","activities","activity","childActivities","childActivity","startTime","findEarlierActivityId","activityId","getMyEventsInOrder","userEvents","wca_id","registration","eventIds","findEarlierEventId","event1","event2","activityCode","flattenActivities","flatActivites","push","assignedTo","assignment","getScheduleData","events","unselectedVenues","unselectedAssignments","includes","slice","indexOf","assignmentCode","startDate","endDate","endTime","getEventFromActivity","activityKey","getGroupFromActivity","lastIndexOf","pyram","skewb","clock","sq1","minx","getActivityIdFromCode","getAssignmentsFromActivityId","compete","staff","asssignment","getPersonalBestFromActivity","competitor","event","activityEvent","personalBests","e","eventId","wcaTime","wcaTimeStr","getPreciseTime","best","getDelays","delays","message","createStyles","height","textAlign","palette","type","error","dark","light","fontSize","Container","paper","marginBottom","margin","table","overflowX","GroupsUser","WCAID","match","myAssignments","mySchedule","roomDelays","xs","align","Paper","alignItems","Fragment","Table","TableHead","TableRow","TableCell","TableBody","tz","timezone","top","backgroundColor","main","header","secondary","maxWidth","GroupsActivity","useState","loading","setLoading","groupInfo","setGroupInfo","useEffect","LinearProgress","justify","disableFocusListener","disableTouchListener","placement","colSpan","GroupsGeneral","setPerson","direction","Autocomplete","onChange","values","options","getOptionLabel","renderInput","TextField","label","fullWidth","Groups","render","props","icon","iconSelect","EventList","selected","alignment","OverviewFilterChips","unselectedRooms","setUnselectedRooms","setUnselectedAssignments","Chip","clickable","roomId","duty","card","maxHeight","Appointment","Overview","myEvents","selectedEvents","setSelectedEvents","setData","changeFilter","currentDate","startDayHour","endDayHour","cellDuration","appointmentComponent","ProjectorRoomAdmin","onRoomChange","onValueChange","target","localConfig","InputLabelProps","shrink","multiline","rows","helperText","group","justifyContent","ProjectorAdmin","setWcif","updateProjectorConfig","projectorConfigUpdate","newRoom","ExpansionPanelDetails","FormGroup","gutterBottom","ButtonGroup","ExpansionPanelActions","GeneralAdmin","updateGeneralConfig","onCheckboxChange","checked","FormControlLabel","control","Switch","showGroups","required","minWidth","InputLabel","htmlFor","NativeSelect","FormHelperText","NotificationsAdmin","heading","typography","pxToRem","fontWeightRegular","mainLoader","left","Admin","localWcif","setLocalWcif","onWcifUpdate","catch","err","CircularProgress","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","disabled","updateNotificationsConfig","variantIcon","success","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","useStyles1","green","amber","iconVariant","display","MySnackbarContentWrapper","onClose","other","Icon","SnackbarContent","clsx","aria-describedby","action","aria-label","useStyles2","MySnackbar","React","open","setOpen","handleClose","reason","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Competition","setState","state","loadingWcif","extensionSetup","compId","res","this","Component","breakpoints","up","flexShrink","menuButton","toolbar","mixins","drawerPaper","content","footerPadding","Dashboard","mobileOpen","managableComps","upcomingComps","onItemChange","currentComponent","setCurrentComponent","comp","CssBaseline","Hidden","smUp","implementation","Drawer","anchor","ModalProps","keepMounted","xsDown","FlagIcon","FlagIconFactory","useCssModules","CompList","myUpcomingComps","subheader","ListSubheader","children","code","country_iso2","toLowerCase","end_date","LandingSignedIn","allUpcomingComps","myManagableComps","loadingAll","loadingMine","upcoming_competitions","comps","box","borderRadius","grid","WelcomeLanding","Box","bgcolor","getCurrentEvents","currentEvents","now","isBetween","add","background","list","AgendaScreen","setDelays","setCurrentEvents","square","elevation","GroupScreen","InfoScreen","ResultsScreen","SpotlightScreen","logo","section","Transition","forwardRef","ref","Slide","ICON","AGENDA","TodayIcon","COMPETING","DirectionsWalkIcon","INFO","SPOTLIGHT","EmojiEventsIcon","RESULTS","EqualizerIcon","getIndex","currentScreen","DURATION","screen","Projector","setError","screens","setCurrentScreen","currentScreenRef","useRef","current","timeout","setInterval","clearTimeout","Dialog","fullScreen","TransitionComponent","Tabs","centered","CurrIcon","Tab","getScreenFromName","fontFamily","join","darkTheme","blue","blueGrey","lightTheme","App","signedIn","loadingAdmin","toggleDarkTheme","newTheme","loadinAdmin","muiTheme","createMuiTheme","ThemeProvider","basename","exact","Boolean","hostname","hash","hashParams","setItem","get","expiresInSeconds","expirationTime","getTime","redirectPath","pathname","initializeAuth","ReactDOM","document","getElementById","navigator","serviceWorker","ready","unregister"],"mappings":"mZAEaA,EACT,uCAGSC,EACTC,8CAAYC,c,QCHDC,EAFCC,c,8NCEhB,IAAMC,EAAkB,SAAAC,GAAG,8BAAqBN,EAArB,YAA4CM,IAoD1DC,EAAiB,kBAC5BC,aAAaC,QAAQJ,EAAgB,iBAE1BK,EAAS,WACpB,IAAMC,EAAS,IAAIC,gBAAgB,CACjCC,UAAWb,EACXc,cAAe,QACfC,aAAcC,IACdC,MAAO,yCAETC,OAAOC,SAAP,UAAqBpB,EAArB,4BAAmDY,EAAOS,aAGtDJ,EAAmB,WACvB,IAAMK,EAASH,OAAOC,SAASG,OAI/B,OAHAC,QAAQC,IAAIH,GACS,IAAIT,gBAAgBM,OAAOC,SAASM,QACvBC,IAAI,WACnB,UAAML,EAAN,iBAA8BA,GAGtCM,EAAU,WACrBnB,aAAaoB,WAAWvB,EAAgB,gBACxCa,OAAOC,SAASU,QAAQ,MAGbC,EAAa,mBAAQvB,K,4CCrE5BwB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,OAAQ,CACNC,OAAQF,EAAME,OAAOC,OAAS,GAEhCC,MAAO,CACLC,eAAgB,OAChBC,MAAO,QACPC,SAAU,EACVC,WAAYR,EAAMS,QAAQ,IAE5BC,UAAW,CACTC,YAAaX,EAAMS,QAAQ,IAE7BG,SAAU,CACRD,YAAaX,EAAMS,QAAQ,QA0ChBI,EAtCA,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,cAAeC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UACnCC,EAAUnB,IAChB,OACE,kBAACoB,EAAA,EAAD,CAAQC,SAAS,SAASb,MAAM,UAAUc,UAAWH,EAAQhB,QAC3D,kBAACoB,EAAA,EAAD,CAASZ,QAAS,EAAGW,UAAWH,EAAQP,WACrCY,YACC,kBAACC,EAAA,EAAD,CAAYC,QAASV,EAAeM,UAAWH,EAAQP,WACrD,kBAAC,IAAD,CAAUe,KAAM,MAGpB,kBAAC,IAAD,MACA,kBAACC,EAAA,EAAD,CACEC,QAAQ,KACRP,UAAWH,EAAQb,MACnBwB,UAAWC,IACXC,GAAI,KAJN,UAQCf,GAAYlB,IACX,kBAAC,WAAD,KACE,kBAAC6B,EAAA,EAAD,CAAYC,QAAQ,YAAYP,UAAWH,EAAQL,UAChDG,EAASgB,MAEZ,kBAACC,EAAA,EAAD,CAAQ1B,MAAM,UAAUkB,QAASR,GAAjC,UACUD,EAASkB,GAAGF,OAIxB,kBAACC,EAAA,EAAD,CAAQ1B,MAAM,UAAUkB,QAAS/C,GAAjC,2B,2GChDJqB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCkC,KAAM,CACJf,SAAU,WACVgB,OAAQ,EACRC,MAAO,OACPC,SAAU,SACVC,QAAStC,EAAMS,QAAQ,IAEzB8B,KAAM,CACJhC,SAAU,GAEZiC,KAAM,CACJC,cAAe,SACfC,WAAY,IACZ,UAAW,CACTrC,eAAgB,OAChBsC,QAAS,SAqEAC,EAhEA,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,cACrB7B,EAAUnB,IAChB,OACE,kBAACiD,EAAA,EAAD,CAAMC,WAAS,EAAC5B,UAAWH,EAAQiB,MACjC,kBAACa,EAAA,EAAD,CAAME,MAAI,EAAC7B,UAAWH,EAAQsB,OAC9B,kBAACQ,EAAA,EAAD,CAAME,MAAI,GACR,kBAACF,EAAA,EAAD,CAAMC,WAAS,EAACvC,QAAS,GACvB,kBAACyC,EAAA,EAAD,CAAS9C,MAAO,SACd,kBAAC2C,EAAA,EAAD,CAAME,MAAI,EAAC5E,IAAI,UACb,kBAACwD,EAAA,EAAD,CACET,UAAWH,EAAQuB,KACnBb,QAAQ,QACRwB,KAAM,gDAEN,kBAAC,IAAD,SAIN,kBAACD,EAAA,EAAD,CAAS9C,MAAO,WACd,kBAAC2C,EAAA,EAAD,CAAME,MAAI,EAAC5E,IAAI,WACb,kBAACwD,EAAA,EAAD,CACET,UAAWH,EAAQuB,KACnBb,QAAQ,QACRwB,KAAM,gCAEN,kBAAC,IAAD,SAIN,kBAACD,EAAA,EAAD,CACE9C,MAAqB,UAAdyC,EAAwB,iBAAmB,mBAElD,kBAACE,EAAA,EAAD,CAAME,MAAI,EAAC5E,IAAI,SACb,kBAACwD,EAAA,EAAD,CACET,UAAWH,EAAQuB,KACnBb,QAAQ,QACRH,QAASsB,GAET,kBAAC,IAAD,SAIN,kBAACI,EAAA,EAAD,CAAS9C,MAAO,SACd,kBAAC2C,EAAA,EAAD,CAAME,MAAI,EAAC5E,IAAI,QACb,kBAACwD,EAAA,EAAD,CAAMT,UAAWH,EAAQuB,KAAMb,QAAQ,QAAQwB,KAAM,UACnD,kBAAC,IAAD,CAAU1B,KAAM,QAItB,kBAACsB,EAAA,EAAD,CAAME,MAAI,EAAC5E,IAAI,WACb,kBAACwD,EAAA,EAAD,CACET,UAAWH,EAAQuB,KACnBb,QAAQ,QACRwB,KAAM,yDAELC,U,2qBCtFR,IAAMC,GAAW,SAAXA,EAAYC,EAAD,EAAsCC,GAAtC,sBAAUC,EAAV,KAAuBC,EAAvB,kBACE,IAAxBA,EAAaC,OAAb,MACSJ,EADT,eACkBE,EAAWD,EAAQD,EAAOE,MAD5C,MAGSF,EAHT,eAIOE,EAAWH,EAASC,EAAOE,GAAWC,EAAcF,MAGhDI,GAAQ,SAACL,EAAQG,EAAcG,GAAvB,OACnBP,GAASC,EAAQG,GAAc,SAAAI,GAAK,OAAIA,GAASA,EAAMC,IAAIF,OAEhDG,GAAQ,SAACT,EAAQG,EAAcO,GAAvB,OACnBX,GAASC,EAAQG,GAAc,kBAAMO,MAEjCC,GAAa,SAACC,EAAGC,GAAJ,OAAWD,EAAIC,EAAI,EAAIA,EAAID,GAAK,EAAI,GAK1CE,GAAkB,SAAAC,GAC7B,OAAOA,EAAIC,MAAK,SAACJ,EAAGC,GAAJ,OACdF,GAAW,IAAIM,KAAKL,EAAEM,YAAa,IAAID,KAAKJ,EAAEK,iBAIrCC,GAAoB,SAACC,EAAOC,GACvC,IAAMC,EAAQC,OACd,OAAID,GAASC,KAAOH,IAAUE,GAASC,KAAOF,GACrC,iBACEE,KAAOH,GAAOI,OAAO,IAAIP,KAAQ,SACpC,MAAN,OAAaQ,KAAKC,MAChBH,KAAOI,SAASJ,KAAOH,GAAOQ,KAAKN,IAAQO,UAD7C,UAIM,GAAN,OAAUN,KAAOH,GAAOU,OAAO,UAA/B,cAA8CP,KAAOF,GAAKS,OAAO,QC/BxDC,GAAgB,SAAAC,GAAa,OACxCC,GAAY,iBAAD,OAAkBD,EAAlB,kBAEAE,GAAU,SAAAF,GAAa,OAClCC,GAAY,iBAAD,OAAkBD,EAAlB,WAEAG,GAAqB,SAAAC,GAChC,OAAOH,GAAY,UAAD,OAAWG,EAAX,iCAgBPC,GAAsB,WACjC,IAAMf,EAAQC,OAASe,QAAQ,OACzBlH,EAAS,IAAIC,gBAAgB,CACjCkH,eAAe,EACfnB,MAAOE,EAAMkB,gBAEf,OAAOP,GAAY,iBAAD,OAAkB7G,EAAOS,cAKvCoG,GAAc,SAACQ,GAA6B,IAAvBC,EAAsB,uDAAP,GAClCC,EAAU,UAAMnI,EAAN,WAEhB,OAAOoI,MAAM,GAAD,OACPD,GADO,OACMF,GAChBI,OAAOC,OAAO,GAAIJ,EAAc,CAC9BK,QAAS,IAAIC,QAAQ,CACnBC,cAAc,UAAD,OAAYjI,KACzB,eAAgB,wBAInBkI,MAAK,SAAAC,GACJ,IAAKA,EAASC,GAAI,MAAM,IAAIC,MAAMF,EAASG,YAC3C,OAAOH,KAERD,MAAK,SAAAC,GAAQ,OAAIA,EAASI,WASlBC,GAAkB,SAACC,EAAcC,GAC5C,IAPkB1B,EAAe2B,EDlBdC,ECyBbC,EAAWhB,OAAOiB,KAAKJ,GAASK,QACpC,SAAAhJ,GAAG,OAAI0I,EAAa1I,KAAS2I,EAAQ3I,MAEvC,OAAwB,IAApB8I,EAASzD,OAAqB4D,QAAQC,WAVxBjC,EAWA0B,EAAQQ,GD7BPN,EC6BgBF,EAXFC,EAWWE,ED5BvCM,QAAO,SAACC,EAAQrJ,GAAT,aAAuBqJ,EAAvB,eAAgCrJ,EAAM6I,EAAI7I,OAAS,ICkB/DkH,GAAY,iBAAD,OAAkBD,EAAlB,SAAwC,CACjDqC,OAAQ,QACRC,KAAMC,KAAKC,UAAUb,O,6MChDV,SAASc,GAAT,GAA2C,IAAlBC,EAAiB,EAAjBA,KAAMxG,EAAW,EAAXA,QACtCyG,EAAU,SAAAC,GACd,OAAQA,GACN,IAAK,YACH,OAAO,kBAAC,KAAD,MACT,IAAK,SACH,OAAO,kBAAC,KAAD,MACT,IAAK,gBACH,OAAO,kBAAC,KAAD,MACT,IAAK,QACH,OAAO,kBAAC,KAAD,MACT,IAAK,YACH,OAAO,kBAAC,KAAD,MACT,QACE,OAAO,kBAAC,KAAD,QAGb,OACE,yBAAKC,MAAO,CAAEC,UAAW,SACvB,kBAACC,GAAA,EAAD,MACA,kBAACC,GAAA,EAAD,KACG,CAAC,WAAY,SAAU,iBAAiBxE,KAAI,SAAAoE,GAAI,OAC/C,kBAACK,GAAA,EAAD,CAAUC,QAAM,EAACnK,IAAK6J,EAAM1G,QAAS,kBAAMA,EAAQ0G,KACjD,kBAACO,GAAA,EAAD,KAAeR,EAAQC,IACvB,kBAACQ,GAAA,EAAD,CAAcC,QAAST,SAI7B,kBAACG,GAAA,EAAD,MACU,UAATL,GACC,kBAACM,GAAA,EAAD,KACG,CAAC,QAAS,aAAaxE,KAAI,SAAAoE,GAAI,OAC9B,kBAACK,GAAA,EAAD,CAAUC,QAAM,EAACnK,IAAK6J,EAAM1G,QAAS,kBAAMA,EAAQ0G,KACjD,kBAACO,GAAA,EAAD,KAAeR,EAAQC,IACvB,kBAACQ,GAAA,EAAD,CAAcC,QAAST,UC7CtB,SAASU,KACtB,OAAO,8B,ilBCHT,IAAMC,GAAiB,SAAAC,GAAa,yBAAgBA,IAE9CC,GAAiB,SAACD,EAAeE,GAAhB,MAA0B,CAC/CxB,GAAIqB,GAAeC,GACnBG,QAAQ,yCAAD,OAA2CH,EAA3C,SACPE,SAGWE,GAAmB,SAACJ,EAAeK,EAAYH,GAC1D,IAAMI,EAAkBD,EAAWE,WAAWhC,QAC5C,SAAAiC,GAAS,OAAIA,EAAU9B,KAAOqB,GAAeC,MAE/C,OAAO,MACFK,EADL,CAEEE,WAAW,GAAD,oBAAMD,GAAN,CAAuBL,GAAeD,EAAeE,QAI7DO,GAAuB,CAC3BC,cAAe,CACbC,cAAc,EACdC,WAAW,EACXC,UAAW,GACXC,kBAAkB,EAClBC,cAAUC,EACVC,iBAAaD,GAEfE,eAAgB,CACdC,MAAO,EACPC,qBAAiBJ,EACjBK,mBAAeL,EACfM,iBAAaN,IAIJO,GAAmB,SAACvB,EAAeK,GAC9C,IAAMG,EAAYH,EAAWE,WAAWiB,MACtC,SAAAhB,GAAS,OAAIA,EAAU9B,KAAOqB,GAAeC,MAE3CyB,EAAchB,GAAqBT,GACvC,OAAoB,OAAhByB,EAA6BjB,GAAaA,EAAUN,KACjDM,EAAS,MAAQiB,EAAR,GAAwBjB,EAAUN,MAASuB,GAGhDC,GAAmB,SAAC1B,EAAe2B,GAAhB,OAC9BA,EAAYpB,WAAWhC,QACrB,SAAAiC,GAAS,OAAIA,EAAU9B,KAAOqB,GAAeC,MAC7CpF,OAAS,G,6jBC3Cb,IAyBagH,GAA0B,SAACC,EAAO1D,GAC7C,IACM2D,EADS,qBACQC,KAAKF,GACtB3C,EAAOf,EAAK6D,QAAQR,MAAK,SAAAS,GAAM,OACnCH,EAAUG,EAAOJ,QAAUA,EAAQI,EAAOC,YAAcC,SAASN,MAEnE,IAAK3C,EAAM,OAAO,KAClB,IAAMkD,EAAkBlD,EAAKmD,YACvBC,EAAWnE,EAAKmE,SACtB,OAAOF,EAAgB5G,MAAK,SAACJ,EAAGC,GAAJ,OAlCA,SAACkH,EAAWC,EAAWF,GACnD,IAAIG,EACAC,EAaJ,OAZAJ,EAASK,OAAOC,SAAQ,SAAAC,GAAK,OAC3BA,EAAMC,MAAMF,SAAQ,SAAAG,GAAI,OACtBA,EAAKC,WAAWJ,SAAQ,SAAAK,GACtBA,EAASC,gBAAgBN,SAAQ,SAAAO,GAC3BA,EAAczE,KAAO6D,EACvBE,EAAQ,IAAIhH,KAAK0H,EAAcC,WACxBD,EAAczE,KAAO8D,IAC5BE,EAAQ,IAAIjH,KAAK0H,EAAcC,wBAKlCX,EAAQC,EAoBbW,CAAsBjI,EAAEkI,WAAYjI,EAAEiI,WAAYhB,OAIzCiB,GAAqB,SAACtL,EAAUkG,GAC3C,IAAMqF,EAAarF,EAAK6D,QAAQR,MAC9B,SAAAS,GAAM,OAAIA,EAAOJ,QAAU5J,EAASkB,GAAGsK,UACvCC,aAAaC,SACTrB,EAAWnE,EAAKmE,SACtB,OAAOkB,EAAWhI,MAAK,SAACJ,EAAGC,GAAJ,OAAUuI,GAAmBxI,EAAGC,EAAGiH,OAGtDsB,GAAqB,SAACC,EAAQC,EAAQxB,GAC1C,IAAIG,EACAC,EAWJ,OAVAJ,EAASK,OAAOC,SAAQ,SAAAC,GAAK,OAC3BA,EAAMC,MAAMF,SAAQ,SAAAG,GAAI,OACtBA,EAAKC,WAAWJ,SAAQ,SAAAK,GAClBA,EAASc,eAAT,UAA6BF,EAA7B,OACFpB,EAAQ,IAAIhH,KAAKwH,EAASG,WACnBH,EAASc,eAAT,UAA6BD,EAA7B,SACPpB,EAAQ,IAAIjH,KAAKwH,EAASG,qBAI3BX,EAAQC,GAEJsB,GAAoB,SAAA1B,GAC/B,IAAI2B,EAAgB,GADuB,uBAE3C,YAAoB3B,EAASK,OAA7B,+CAAqC,CAAC,IAA3BE,EAA0B,+BACnC,YAAmBA,EAAMC,MAAzB,+CAAgC,CAAC,IAAtBC,EAAqB,+BAC9B,YAAuBA,EAAKC,WAA5B,+CAAwC,CAAC,IAA9BC,EAA6B,QACtCgB,EAAcC,KAAd,MAAwBjB,EAAxB,CAAkCF,UADI,2BAEtC,YAA4BE,EAASC,gBAArC,oDAAWC,EAAX,QACEc,EAAcC,KAAd,MAAwBf,EAAxB,CAAuCJ,WAHH,oFADV,oFADG,oFAFM,kFAW3C,OAAOkB,GAEIE,GAAa,SAAAC,GACxB,OAAQA,GACN,IAAK,aACH,MAAO,UACT,IAAK,cACH,MAAO,QACT,IAAK,eACH,MAAO,MACT,IAAK,kBACH,MAAO,WACT,QACE,MAAO,iBAWAC,GAAkB,WAMzB,IALJC,EAKG,uDALM,GACTC,EAIG,uDAJgB,GACnBC,EAGG,uDAHqB,GACxBnC,EAEG,uCADHW,EACG,uCACC9C,EAAO,GADR,uBAGH,IAHG,IAGH,EAHG,iBAGQkE,EAHR,QAIKnB,EAAWD,EAAWxB,MAC1B,SAAAyB,GAAQ,OAAIA,EAASvE,KAAO0F,EAAWd,cAGtCgB,EAAOG,SACNxB,EAASc,aAAaW,MAAM,EAAGzB,EAASc,aAAaY,QAAQ,QAE9DJ,EAAiBE,SAASxB,EAASF,KAAKrE,KACxC8F,EAAsBC,SAASL,EAAWQ,iBAE3C1E,EAAKgE,KAAK,CACRW,UAAW5B,EAASG,UACpB0B,QAAS7B,EAAS8B,QAClBzN,MAAM,GAAD,OAAK6M,GAAWC,EAAWQ,gBAA3B,eAAiD3B,EAAShK,MAC/D2L,eAAgBR,EAAWQ,eAC3B3B,SAAUA,KAhBhB,EAAyBZ,EAAzB,+CAAuC,IAHpC,kFAsBH,OAAOnC,GAOI8E,GAAuB,SAAA/B,GAAQ,gBACvCgC,GAAYhC,EAASyB,MAAM,EAAGzB,EAAS0B,QAAQ,OADR,kBAExC1B,EAASA,EAAS0B,QAAQ,KAAO,GAFO,MAQ/BO,GAAuB,SAAAjC,GAAQ,sBACjCA,EAASyB,MAAMzB,EAASkC,YAAY,KAAO,KAEzCF,GAAc,CACzB,IAAO,MACP,IAAO,MACP,IAAO,MACP,IAAO,MACP,IAAO,MACP,IAAO,MACPG,MAAO,WACP,QAAS,iBACT,OAAQ,kBACR,OAAQ,kBACRC,MAAO,QACPC,MAAO,QACP,QAAS,gBACT,SAAU,2BACV,QAAS,eACTC,IAAK,WACLC,KAAM,YAGKC,GAAwB,SAAC1B,EAAcf,GAIlD,OAHiBA,EAAWxB,MAC1B,SAAAyB,GAAQ,OAAIA,EAASc,eAAiBA,MAK7B2B,GAA+B,SAAC3B,EAAc5F,GACzD,IAAIwH,EAAU,GACVC,EAAQ,GACN5D,EAAU7D,EAAK6D,QAH6C,uBAIlE,YAAqBA,EAArB,+CAA8B,CAAC,IAApBC,EAAmB,+BAC5B,YAA0BA,EAAOI,YAAjC,+CAA8C,CAAC,IAApCwD,EAAmC,QACxCA,EAAYvC,aAAeS,IACE,eAA/B8B,EAAYjB,eACRe,EAAQzB,KAAKjC,GACb2D,EAAM1B,KAAKjC,KALS,oFAJoC,kFAalE,MAAO,CAAC0D,EAASC,IAGNE,GAA8B,SAACC,EAAYhC,GACtD,IAAMiC,EAAQjC,EAAaW,MAAM,EAAGX,EAAaY,QAAQ,MACnDsB,EAAgBF,EAAWG,cAAc1E,MAAK,SAAA2E,GAAC,OAAIA,EAAEC,UAAYJ,KACvE,OAAOC,ELtJqB,SAAAI,GAC5B,IAAMC,EAAaD,EAAQhQ,WAE3B,MADU,UAAMiQ,EAAW5B,MAAM,GAAI,GAA3B,YAAiC4B,EAAW5B,OAAO,IKoJtC6B,CAAeN,EAAcO,MAAQ,IAGjDC,GAAY,SAAAnE,GACvB,IAAIoE,EAAS,GADsB,uBAEnC,YAAoBpE,EAASK,OAA7B,+CAAqC,CAAC,IAA3BE,EAA0B,+BACnC,YAAmBA,EAAMC,MAAzB,+CAAgC,CAAC,IAAtBC,EAAqB,QAC9B2D,EAAO3D,EAAKrE,IAAMyD,SAASZ,GAAiB,iBAAkBwB,GAAM5B,QAFnC,oFAFF,kFAOnC,OAAOuF,G,sJCpMM,SAAS7I,GAAT,GAA6B,IAAZ8I,EAAW,EAAXA,QAiBxBxO,EAhBYlB,aAAW,SAAAC,GAAK,OAChC0P,aAAa,CACXxN,KAAM,CACJE,MAAO,OACPuN,OAAQ,OACRC,UAAW,SACXtP,MACyB,UAAvBN,EAAM6P,QAAQC,KACV9P,EAAM6P,QAAQE,MAAMC,KACpBhQ,EAAM6P,QAAQE,MAAME,OAE5BF,MAAO,CACLG,SAAU,YAIApQ,GAChB,OACE,kBAACqQ,GAAA,EAAD,KACE,yBAAK/O,UAAWH,EAAQiB,MACtB,kBAAC,KAAD,CAAWd,UAAWH,EAAQ8O,QAC9B,kBAACrO,EAAA,EAAD,CAAYC,QAAQ,MAApB,SACA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,aAAa8N,KCEzC,IAAM3P,GAAYC,cAAW,SAAAC,GAAK,MAAK,CACrCkC,KAAM,CACJE,MAAO,OACPgG,UAAWpI,EAAMS,QAAQ,IAE3B2P,MAAO,CACLhO,MAAO,OACPE,QAAStC,EAAMS,QAAQ,GACvB4P,aAAcrQ,EAAMS,QAAQ,IAE9ByH,KAAM,CACJoI,OAAQtQ,EAAMS,QAAQ,IAExB8P,MAAO,CACLC,UAAW,QAEbhO,KAAM,CACJlC,MAAON,EAAM6P,QAAQlH,QAAQsH,MAC7B5P,eAAgB,YAGL,SAASoQ,GAAT,GAAuD,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,MAAO5P,EAAkB,EAAlBA,SAAUkG,EAAQ,EAARA,KAC3D3H,QAAQC,IAAIwB,GAEZ,IAAM4J,EAAQgG,EAAQA,EAAMjS,OAAOiM,MAAQ+F,GAAgB,KACrDE,EAAgBlG,GAAwBC,EAAO1D,GAC/Ce,EAAOf,EAAK6D,QAAQR,MACxB,SAAAS,GAAM,OAAIA,EAAOJ,QAAUA,GAASI,EAAOC,YAAcC,SAASN,MAE9DkG,EACJD,GACAzD,GAAgB,GAAI,GAAI,GAAIyD,EAAe9D,GAAkB7F,EAAKmE,WAC9DnK,EAAUnB,KACVgR,EAAavB,GAAUtI,EAAKmE,UAClC,OACE,oCACqB,OAAlBwF,EACC,kBAAC,GAAD,CAAOnB,QAAS,eAEhB,kBAAC1M,EAAA,EAAD,CAAME,MAAI,EAAC7B,UAAWH,EAAQiB,KAAM6O,GAAI,IACtC,kBAACrP,EAAA,EAAD,CACEN,UAAWH,EAAQiH,KACnB8I,MAAM,SACNrP,QAAQ,KACRC,UAAU,MAEToG,EAAKjG,MAER,kBAACL,EAAA,EAAD,CACEN,UAAWH,EAAQiH,KACnB8I,MAAM,SACNrP,QAAQ,KACRC,UAAU,MAEToG,EAAK2C,OAER,kBAACsG,GAAA,EAAD,CAAO7P,UAAWH,EAAQmP,OACvBnJ,EAAKmE,SAASK,OAAO3H,KAAI,SAAA6H,GAAK,OAC7BA,EAAMC,MAAM9H,KAAI,SAAA+H,GACd,OAAIiF,EAAWjF,EAAKrE,IAAM,EAEtB,kBAACzE,EAAA,EAAD,CACEC,WAAS,EACTvC,QAAS,EACTpC,IAAKwN,EAAKrE,GACV0J,WAAW,UAEX,kBAACnO,EAAA,EAAD,CAAME,MAAI,GACR,kBAAC,IAAD,CACEkF,MAAO,CAAE7H,MAAOuL,EAAKvL,OACrB4P,SAAS,WAGb,kBAACnN,EAAA,EAAD,CAAME,MAAI,GACR,kBAACvB,EAAA,EAAD,eACMmK,EAAK9J,KADX,oCAEI+O,EAAWjF,EAAKrE,IAFpB,kBAQI,kBAAC,IAAM2J,SAAP,CAAgB9S,IAAKwN,EAAKrE,WAGU,IAAnDsJ,EAAWzJ,QAAO,SAAA4C,GAAK,OAAc,IAAVA,KAAavG,QACvC,kBAACX,EAAA,EAAD,CAAMC,WAAS,EAACvC,QAAS,EAAGyQ,WAAW,UACrC,kBAACnO,EAAA,EAAD,CAAME,MAAI,GACR,kBAAC,KAAD,CAAakF,MAAO,CAAE7H,MAAO,WAAa4P,SAAS,WAErD,kBAACnN,EAAA,EAAD,CAAME,MAAI,GACR,kBAACvB,EAAA,EAAD,eACMuF,EAAKlF,KADX,gCAOR,kBAACkP,GAAA,EAAD,CAAO7P,UAAWH,EAAQmP,OACxB,kBAACgB,GAAA,EAAD,CAAOhQ,UAAWH,EAAQsP,OACxB,kBAACc,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAW9P,KAAK,SACd,kBAACC,EAAA,EAAD,kBAEF,kBAAC6P,GAAA,EAAD,KACE,kBAAC7P,EAAA,EAAD,mBAEF,kBAAC6P,GAAA,EAAD,CAAW9P,KAAK,SACd,kBAACC,EAAA,EAAD,mBAEF,kBAAC6P,GAAA,EAAD,CAAW9P,KAAK,SACd,kBAACC,EAAA,EAAD,sBAEF,kBAAC6P,GAAA,EAAD,KACE,kBAAC7P,EAAA,EAAD,oBAIN,kBAAC8P,GAAA,EAAD,KACGX,GACCA,EAAW/M,KAAI,SAAAoJ,GAAU,OACvB,kBAACoE,GAAA,EAAD,CAAUjT,IAAK6O,EAAW9M,OACxB,kBAACmR,GAAA,EAAD,KACE,kBAAC7P,EAAA,EAAD,KACGmD,KAAOqI,EAAWS,WAChB8D,GAAGxK,EAAKmE,SAASK,OAAO,GAAGiG,UAC3BtM,OAAO,aAGd,kBAACmM,GAAA,EAAD,KACE,kBAAC7P,EAAA,EAAD,KACGoM,GACCZ,EAAWnB,SAASc,gBAI1B,kBAAC0E,GAAA,EAAD,KACE,kBAAC,IAAD,CACEnQ,UAAWH,EAAQuB,KACnBV,GAAE,wBAAmBmF,EAAKO,GAAxB,mBAAqC0F,EAAWnB,SAASF,KAAKrE,GAA9D,YAAoE0F,EAAWnB,SAASc,eAE1F,kBAACnL,EAAA,EAAD,KACGsM,GACCd,EAAWnB,SAASc,iBAK5B,kBAAC0E,GAAA,EAAD,KACE,kBAAC7P,EAAA,EAAD,KACGuL,GAAWC,EAAWQ,kBAG3B,kBAAC6D,GAAA,EAAD,KACE,kBAACxO,EAAA,EAAD,CAAMC,WAAS,EAACkO,WAAW,UACzB,kBAACnO,EAAA,EAAD,CAAME,MAAI,GACR,kBAACvB,EAAA,EAAD,KACGwL,EAAWnB,SAASF,KAAK9J,OAG9B,kBAACgB,EAAA,EAAD,CAAME,MAAI,GACR,kBAAC,KAAD,CACEkF,MAAO,CACL+H,SAAU,OACV5P,MAAO4M,EAAWnB,SAASF,KAAKvL,qBCzKhE,IAAMR,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCkC,KAAM,CACJE,MAAO,OACPkO,OAAQtQ,EAAMS,QAAQ,IAExB+B,KAAM,CACJnC,eAAgB,OAChBC,MAAON,EAAM6P,QAAQlH,QAAQsH,OAE/B0B,IAAK,CACHrB,OAAQ,OACRsB,gBAAiB5R,EAAM6P,QAAQlH,QAAQkJ,MAEzCC,OAAQ,CACNF,gBAAiB5R,EAAM6P,QAAQkC,UAAUF,MAE3C3J,KAAM,CACJoI,OAAQtQ,EAAMS,QAAQ,IAExB8P,MAAO,CACLD,OAAQ,OAER0B,SAAU,SAIC,SAASC,GAAT,GAAoD,IAA1BtB,EAAyB,EAAzBA,MAAiB1J,GAAQ,EAAlBlG,SAAkB,EAARkG,MAChD4F,EAAiB8D,EAAMjS,OAAvBmO,aACFd,EAAWwC,GACf1B,EACAC,GAAkB7F,EAAKmE,WAJuC,EAMlC8G,oBAAS,GANyB,oBAMzDC,EANyD,KAMhDC,EANgD,OAO9BF,mBAAS,IAPqB,oBAOzDG,EAPyD,KAO9CC,EAP8C,KAQhEC,qBAAU,WACRD,EACE9D,GACED,GAAsB1B,EAAcC,GAAkB7F,EAAKmE,WACxD5D,GACHP,IAGJmL,GAAW,KACV,CAACvF,EAAc5F,IAClB,IAAMhG,EAAUnB,KAChB,OACE,oCACGqS,GAAW,kBAACK,GAAA,EAAD,OACVL,GAAWE,EAAU,IACrB,yBAAKjR,UAAWH,EAAQiB,MACtB,kBAACa,EAAA,EAAD,CAAMC,WAAS,EAACvC,QAAS,EAAGyQ,WAAW,SAASuB,QAAQ,UACtD,kBAAC1P,EAAA,EAAD,CAAME,MAAI,GACR,kBAACC,EAAA,EAAD,CACEwP,sBAAoB,EACpBC,sBAAoB,EACpBC,UAAU,MACVxS,MAAK,UAAK2L,EAASF,KAAK9J,OAExB,kBAACR,EAAA,EAAD,KACE,kBAAC,KAAD,CACE4G,MAAO,CAAE7H,MAAOyL,EAASF,KAAKvL,MAAO4P,SAAU,aAKvD,kBAACnN,EAAA,EAAD,CAAME,MAAI,GACR,kBAACvB,EAAA,EAAD,CACEN,UAAWH,EAAQiH,KACnB8I,MAAM,SACNrP,QAAQ,KACRC,UAAU,MAETmK,EAAShK,QAIhB,kBAACqP,GAAA,EAAD,CAAO3P,KAAK,QAAQL,UAAWH,EAAQsP,OACrC,kBAACc,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAWnQ,UAAWH,EAAQ0Q,IAAKX,MAAM,SAAS6B,QAAS,GACzD,kBAACnR,EAAA,EAAD,wBAGJ,kBAAC4P,GAAA,EAAD,CAAUlQ,UAAWH,EAAQ6Q,QAC3B,kBAACP,GAAA,EAAD,KACE,kBAAC7P,EAAA,EAAD,oBAEF,kBAAC6P,GAAA,EAAD,KACE,kBAAC7P,EAAA,EAAD,gBAEF,kBAAC6P,GAAA,EAAD,KACE,kBAAC7P,EAAA,EAAD,qBAIN,kBAAC8P,GAAA,EAAD,KACGa,EAAU,GAAGvO,KAAI,SAAA+K,GAAU,OAC1B,kBAACyC,GAAA,EAAD,CAAUjT,IAAKwQ,EAAW7D,WACxB,kBAACuG,GAAA,EAAD,KACE,kBAAC,IAAD,CACEnQ,UAAWH,EAAQuB,KACnBV,GAAE,wBAAmBmF,EAAKO,GAAxB,mBACAqH,EAAWlE,MACPkE,EAAWlE,MACXkE,EAAW7D,YAGjB,kBAACtJ,EAAA,EAAD,SAAcmN,EAAW9M,QAG7B,kBAACwP,GAAA,EAAD,KACE,kBAAC7P,EAAA,EAAD,KAAamN,EAAWlE,QAE1B,kBAAC4G,GAAA,EAAD,KACE,kBAAC7P,EAAA,EAAD,KACGkN,GACCC,EACA9C,EAASc,qBAOrB,kBAACwE,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAWnQ,UAAWH,EAAQ0Q,IAAKX,MAAM,SAAS6B,QAAS,GACzD,kBAACnR,EAAA,EAAD,kBAGJ,kBAAC4P,GAAA,EAAD,CAAUlQ,UAAWH,EAAQ6Q,QAC3B,kBAACP,GAAA,EAAD,KACE,kBAAC7P,EAAA,EAAD,sBAEF,kBAAC6P,GAAA,EAAD,KACE,kBAAC7P,EAAA,EAAD,kBAEF,kBAAC6P,GAAA,EAAD,KACE,kBAAC7P,EAAA,EAAD,kBAIN,kBAAC8P,GAAA,EAAD,KACGa,EAAU,GAAGvO,KAAI,SAAA+K,GAAU,OAC1B,kBAACyC,GAAA,EAAD,CAAUjT,IAAKwQ,EAAW7D,WACxB,kBAACuG,GAAA,EAAD,KACGjS,QAAQC,IAAIsP,GACb,kBAAC,IAAD,CACEzN,UAAWH,EAAQuB,KACnBV,GAAE,wBAAmBmF,EAAKO,GAAxB,mBACAqH,EAAWlE,MACPkE,EAAWlE,MACXkE,EAAW7D,YAGjB,kBAACtJ,EAAA,EAAD,KAAamN,EAAW9M,QAG5B,kBAACwP,GAAA,EAAD,KACE,kBAAC7P,EAAA,EAAD,KAAamN,EAAWlE,QAE1B,kBAAC4G,GAAA,EAAD,KACE,kBAAC7P,EAAA,EAAD,KACGuL,GACC4B,EAAW1D,YAAYb,MACrB,SAAA4C,GAAU,OAAIA,EAAWd,aAAeL,EAASvE,MACjDkG,0B,wBC5LX,SAASoF,GAAT,GAAkC,IAAT7L,EAAQ,EAARA,KAChC6D,EAAU7D,EAAK6D,QADyB,EAElBoH,mBAASpH,EAAQ,IAFC,oBAEvCC,EAFuC,KAE/BgI,EAF+B,KAM9C,OACE,kBAAChQ,EAAA,EAAD,CAAMC,WAAS,EAACgQ,UAAU,SAAS9B,WAAW,UAC5C,kBAACnO,EAAA,EAAD,CAAME,MAAI,GACR,kBAACgQ,GAAA,EAAD,CACEC,SAPa,SAACpE,EAAOqE,GAC3BJ,EAAUI,IAOJC,QAAStI,EACTuI,eAAgB,SAAAtI,GAAM,gBACjBA,EAAOhJ,KADU,YACFgJ,EAAOJ,MAAP,YAAoBI,EAAOJ,OAAU,KAEzDxC,MAAO,CAAE/F,MAAO,KAChB4B,MAAO+G,EACPuI,YAAa,SAAA5U,GAAM,OACjB,kBAAC6U,GAAA,EAAD,iBACM7U,EADN,CAEE8U,MAAM,aACN7R,QAAQ,WACR8R,WAAS,SAKjB,kBAAC1Q,EAAA,EAAD,CAAME,MAAI,GACR,kBAACwN,GAAD,CACEC,MAAO3F,EAAOJ,MAAQI,EAAOJ,MAAQI,EAAOC,UAC5CjK,SAAUgK,EACV9D,KAAMA,MC/BD,SAASyM,GAAT,GAA2C,IAAzB1L,EAAwB,EAAxBA,KAAMf,EAAkB,EAAlBA,KAAMlG,EAAY,EAAZA,SAE3C,OADAzB,QAAQC,IAAIwB,GAEV,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEgF,KAAI,wBAAmBkB,EAAKO,GAAxB,iCACJmM,OAAQ,SAAAC,GAAK,OACX,kBAAC3B,GAAD,iBAAoB2B,EAApB,CAA2B3M,KAAMA,EAAMlG,SAAUA,QAGrD,kBAAC,IAAD,CACEgF,KAAI,wBAAmBkB,EAAKO,GAAxB,mBACJmM,OAAQ,SAAAC,GAAK,OAAI,kBAACd,GAAD,iBAAmBc,EAAnB,CAA0B3M,KAAMA,QAEnD,kBAAC,IAAD,CACElB,KAAI,wBAAmBkB,EAAKO,GAAxB,kBACJmM,OAAQ,SAAAC,GAAK,OACX,kBAACnD,GAAD,iBAAgBmD,EAAhB,CAAuB3M,KAAMA,EAAMlG,SAAUA,QAGvC,cAATiH,GACC,kBAAC,IAAD,CACElG,GAAE,wBAAmBmF,EAAKO,GAAxB,mBACAzG,EAASkB,GAAGsK,OAASxL,EAASkB,GAAGsK,OAASxL,EAASkB,GAAGuF,MAIlD,cAATQ,GACC,kBAAC,IAAD,CAAUlG,GAAE,wBAAmBmF,EAAKO,GAAxB,sBC9BpB,IAAM1H,GAAYC,cAAW,SAAAC,GAAK,MAAK,CACrCkC,KAAM,CACJ3B,SAAU,GAEZsT,KAAM,CACJ3D,SAAU,GACV5N,QAAStC,EAAMS,QAAQ,GACvB,UAAW,CACTkC,QAAS,GACTrC,MAAON,EAAM6P,QAAQlH,QAAQkJ,OAGjCiC,WAAY,CACV5D,SAAU,GACV5N,QAAStC,EAAMS,QAAQ,GACvBH,MAAON,EAAM6P,QAAQlH,QAAQkJ,KAC7B,UAAW,CACTlP,QAAS,SAKA,SAASoR,GAAT,GASX,IAAD,IARDC,gBAQC,MARU,GAQV,EAPDxS,EAOC,EAPDA,QACAiR,EAMC,EANDA,QACArF,EAKC,EALDA,OAKC,IAJD6G,iBAIC,MAJW,MAIX,EACKhT,GADL,EAHDQ,KAGC,EAFDuG,KAEC,EADDjH,SAEgBjB,MAChB,OACE,yBAAKsB,UAAWH,EAAQiB,MACtB,kBAACa,EAAA,EAAD,CAAMC,WAAS,EAACgQ,UAAWiB,EAAWxB,QAASA,GAC5CrF,EAAOtJ,KAAI,SAAAgL,GAAK,OACf,kBAAC/L,EAAA,EAAD,CAAME,MAAI,EAAC5E,IAAKyQ,GACd,kBAACvN,EAAA,EAAD,CAAYI,QAAQ,UAAUH,QAAS,kBAAMA,EAAQsN,KACnD,0BACE1N,WACI4S,EAASzG,SAASuB,GAEhB7N,EAAQ4S,KADR5S,EAAQ6S,YADZ,6BAE0ChF,Y,gCC1C7C,SAASoF,GAAT,GAMX,IALFzI,EAKC,EALDA,OACA0I,EAIC,EAJDA,gBACAC,EAGC,EAHDA,mBACA9G,EAEC,EAFDA,sBACA+G,EACC,EADDA,yBAoBA,OACE,kBAACtR,EAAA,EAAD,CAAMC,WAAS,EAACgQ,UAAU,SAASvS,QAAS,GAC1C,kBAACsC,EAAA,EAAD,CAAME,MAAI,GACPwI,EAAO3H,KAAI,SAAA6H,GAAK,OACfA,EAAMC,MAAM9H,KAAI,SAAA+H,GAAI,OAClB,kBAACyI,GAAA,EAAD,CACEC,WAAS,EACT/S,QAAS,kBAnBOgT,EAmBmB3I,EAAKrE,QAlBlD2M,EAAgB5G,SAASiH,GACrBJ,EAAmBD,EAAgB9M,QAAO,SAAAwE,GAAI,OAAIA,IAAS2I,MAC3DJ,EAAmB,GAAD,oBAAKD,GAAL,CAAsBK,MAHlB,IAAAA,GAoBhBnW,IAAKwN,EAAKrE,GACVgM,MAAO3H,EAAK9J,KACZoG,MACEgM,EAAgB5G,SAAS1B,EAAKrE,IAC1B,GACA,CAAEoK,gBAAiB/F,EAAKvL,gBAMtC,kBAACyC,EAAA,EAAD,CAAME,MAAI,GArCC,CACb,aACA,cACA,eACA,mBAkCYa,KAAI,SAAA2Q,GAAI,OACd,kBAACH,GAAA,EAAD,CACEC,WAAS,EACT/S,QAAS,kBA9BeO,EA8BiB0S,OA7BjDnH,EAAsBC,SAASxL,GAC3BsS,EACE/G,EAAsBjG,QAAO,SAAA6F,GAAU,OAAIA,IAAenL,MAE5DsS,EAAyB,GAAD,oBAAK/G,GAAL,CAA4BvL,MALxB,IAAAA,GA+BxB1D,IAAKoW,EACLjB,MAAOvG,GAAWwH,GAClBnU,MAAOgN,EAAsBC,SAASkH,GAAQ,UAAY,iBC5CtE,IAAM3U,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCkC,KAAM,CACJ3B,SAAU,EACV+B,QAAStC,EAAMS,QAAQ,EAAG,IAE5B2P,MAAO,CACLE,OAAQtQ,EAAMS,QAAQ,GACtB6B,QAAStC,EAAMS,QAAQ,GACvBmP,UAAW,UAEb8E,KAAM,CACJ9E,UAAW,SACXU,OAAQtQ,EAAMS,QAAQ,GACtBkU,UAAW,aAGTC,GAAc,SAAAhB,GAClB,OACE,kBAAC,KAAagB,YAAd,iBACMhB,EADN,CAEEzL,MAAO,CAAEyJ,gBAAiBgC,EAAM5K,KAAK+C,SAASF,KAAKvL,WAK1C,SAASuU,GAAT,GAMX,IALFC,EAKC,EALDA,SACAlE,EAIC,EAJDA,cACA3J,EAGC,EAHDA,KACAe,EAEC,EAFDA,KACAjH,EACC,EADDA,SAEME,EAAUnB,KADf,EAE2CoS,mBAAS,IAFpD,oBAEM6C,EAFN,KAEsBC,EAFtB,OAG6C9C,mBAAS,IAHtD,oBAGMiC,EAHN,KAGuBC,EAHvB,OAIyDlC,mBAAS,IAJlE,oBAIM5E,EAJN,KAI6B+G,EAJ7B,OAKuBnC,mBAAS,IALhC,oBAKMlJ,EALN,KAKYiM,EALZ,KAMD1C,qBAAU,WACR0C,EACE9H,GACE4H,EACAZ,EACA7G,EACAsD,EACA9D,GAAkB7F,EAAKmE,cAG1B,CACD2J,EACAZ,EACA7G,EACAsD,EACA3J,IAQF,OACE,yBAAK7F,UAAWH,EAAQiB,MACtB,kBAAC+O,GAAA,EAAD,CAAO7P,UAAWH,EAAQmP,OACxB,kBAAC2D,GAAD,CACEC,SAAUe,EACVvT,QAXiB,SAAA0N,GACvB6F,EAAexH,SAAS2B,GACpB8F,EAAkBD,EAAe1N,QAAO,SAAAyH,GAAK,QAAMA,IAAUI,OAC7D8F,EAAkB,GAAD,oBAAKD,GAAL,CAAqB7F,MASpCuD,QAAQ,SACRrF,OAAQ0H,EACR9M,KAAMA,EACNjH,SAAUA,IAEZ,kBAACmT,GAAD,CACEzI,OAAQxE,EAAKmE,SAASK,OACtB0I,gBAAiBA,EACjBC,mBAAoBA,EACpB9G,sBAAuBA,EACvB+G,yBAA0BA,EAC1Ba,aAlBa,eAoBf,kBAAC,KAAD,CAAWlM,KAAMA,GACf,kBAAC,KAAD,CAAWmM,YAAalO,EAAKmE,SAASuC,YACtC,kBAAC,KAAD,CAASyH,aAAc,EAAGC,WAAY,GAAIC,aAAc,KACxD,kBAAC,KAAD,CAAcC,qBAAsBX,Q,qFCvF/B,SAASY,GAAT,GAAkD,IAArB3J,EAAoB,EAApBA,KAAK4J,EAAe,EAAfA,aACvCC,EAAgB,SAAC3T,GAAD,OAAU,SAAC+M,GAC7B2G,EACIvM,GACI,iBACA2C,EACA9H,GAAMsG,GAAiB,iBAAiBwB,GAAM,CAAC9J,GAAM+M,EAAM6G,OAAO3R,WAGxE4R,EAAcvL,GAAiB,iBAAiBwB,GACtD,OACA,oCACI,kBAACnK,EAAA,EAAD,CAAYC,QAAQ,MAAMkK,EAAK9J,MAC/B,kBAACwR,GAAA,EAAD,CACI/L,GAAG,kBACHgM,MAAM,kBACN1D,KAAK,SACL+F,gBAAiB,CACbC,QAAQ,GAEZ9R,MAAO4R,EAAY3L,MACnBiJ,SAAUwC,EAAc,SACxBpF,OAAO,SACP3O,QAAQ,aAEZ,kBAAC4R,GAAA,EAAD,CACI/L,GAAG,4BACHgM,MAAM,kBACN1D,KAAK,OACL+F,gBAAiB,CACbC,QAAQ,GAEZC,WAAS,EACTC,KAAK,IACLhS,MAAO4R,EAAYzL,cACnB+I,SAAUwC,EAAc,iBACxBpF,OAAO,SACP3O,QAAQ,WACRsU,WAAW,wLAEf,kBAAC5N,GAAA,EAAD,OC9BR,IAAMvI,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCkC,KAAM,CACJE,MAAO,QAEThC,MAAO,CACLkQ,OAAQtQ,EAAMS,QAAQ,GACtBmP,UAAW,UAEbsG,MAAO,CACLC,eAAgB,UAElB3T,KAAM,CACJ2T,eAAgB,SAChBnE,SAAU,SAIC,SAASoE,GAAT,GAMX,IALFnP,EAKC,EALDA,KACAoP,EAIC,EAJDA,QACAC,EAGC,EAHDA,sBACA7K,EAEC,EAFDA,OACAjE,EACC,EADDA,GAEM+O,EAAwB,SAAAC,GAC5BlX,QAAQC,IAAIiX,GACZH,EACE1S,GAAMsD,EAAM,CAAC,WAAY,WAAW,SAAA0E,GAAK,OACvChI,GAAMgI,EAAO,CAAC,UAAU,SAAAE,GAAI,OAC1BA,EAAKrE,KAAOgP,EAAQhP,GAAKgP,EAAU3K,UAQrC5K,EAAUnB,KAChB,OACE,oCACE,kBAAC2W,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KACGjL,EAAO3H,KAAI,SAAA6H,GAAK,OACfA,EAAMC,MAAM9H,KAAI,SAAA+H,GAAI,OAClB,kBAAC2J,GAAD,CACEnX,IAAKwN,EAAKrE,GACVqE,KAAMA,EACN4J,aAAcc,UAIpB,kBAAC7U,EAAA,EAAD,CAAYN,UAAWH,EAAQb,MAAOuB,QAAQ,KAAKgV,cAAY,GAA/D,6BAGA,kBAACC,GAAA,EAAD,CAAaxV,UAAWH,EAAQiV,OAC9B,kBAAClU,EAAA,EAAD,CACEZ,UAAWH,EAAQuB,KACnBb,QAAQ,WACRwB,KAAI,mBAAcqE,EAAd,SAHN,aAOA,kBAACxF,EAAA,EAAD,CACEZ,UAAWH,EAAQuB,KACnBb,QAAQ,WACRwB,KAAI,mBAAcqE,EAAd,SAHN,mBAOCiE,EAAO3H,KAAI,SAAA6H,GAAK,OACfA,EAAMC,MAAM9H,KAAI,SAAA+H,GAAI,OAClB,kBAAC7J,EAAA,EAAD,CACEZ,UAAWH,EAAQuB,KACnBnE,IAAKwN,EAAKrE,GACV7F,QAAQ,WACRwB,KAAI,mBAAc0I,EAAKrE,KAEtBqE,EAAK9J,eAOlB,kBAAC8U,GAAA,EAAD,KACE,kBAAC7U,EAAA,EAAD,CAAQP,KAAK,QAAQnB,MAAM,UAAUkB,QAAS,WAlDlD8U,MAkDI,U,sDCxFO,SAASQ,GAAT,GAA2D,IAE/C/U,EAFWkF,EAAmC,EAAnCA,KAAKoP,EAA8B,EAA9BA,QAAQU,EAAsB,EAAtBA,oBACzCnB,EAAcvL,GAAiB,gBAAgBpD,GAU/C+P,EAAmB,SAACjV,GAAD,OAAU,SAAC+M,GAChCuH,EACInN,GACI,gBACAjC,EACAlD,GAAMsG,GAAiB,gBAAgBpD,GAAM,CAAClF,GAAM+M,EAAM6G,OAAOsB,WAGzE3X,QAAQC,IAAI0H,GACZ3H,QAAQC,IAAI8K,GAAiB,gBAAgBpD,MAKjD,OACA,oCACI,kBAACwP,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACQ,GAAA,EAAD,CACIC,QACI,kBAACC,GAAA,EAAD,CACAH,QAASrB,EAAYnM,aACrBzF,MAAM,eACNkP,SAAU8D,EAAiB,kBAG/BxD,MAAM,kBAEV,kBAAC0D,GAAA,EAAD,CACIC,QACI,kBAACC,GAAA,EAAD,CACAH,QAASrB,EAAYhM,iBACrB5F,MAAM,mBACNkP,SAAU8D,EAAiB,sBAG/BxD,MAAM,+BAEV,kBAAC0D,GAAA,EAAD,CACIC,QACI,kBAACC,GAAA,EAAD,CACAH,QAASrB,EAAYyB,WACrBrT,MAAM,YACNkP,SAAU8D,EAAiB,eAG/BxD,MAAM,8BAGV,kBAAC,KAAD,CACI8D,UAAQ,EACRnP,MAAO,CACHmI,OAAO,GACPiH,SAAU,KAEdJ,QACI,6BACI,kBAACK,GAAA,EAAD,CAAYC,QAAQ,qBAApB,mBACA,kBAACC,GAAA,EAAD,CACA1T,MAAO4R,EAAYjM,UACnBuJ,UArEDnR,EAqEyB,YArEhB,SAAC+M,GAC7BuH,EACInN,GACI,gBACAjC,EACAlD,GAAMsG,GAAiB,gBAAgBpD,GAAM,CAAClF,GAAM+M,EAAM6G,OAAO3R,YAkErD,4BAAQA,MAAM,IAAd,QACA,4BAAQA,MAAM,cAAd,eAEA,kBAAC2T,GAAA,EAAD,+OAMpB,kBAACd,GAAA,EAAD,KACI,kBAAC7U,EAAA,EAAD,CAAQP,KAAK,QAAQnB,MAAM,UAAUkB,QAAS,WA5DlDuV,MA4DI,UC/FG,SAASa,KACpB,OACI,8B,cCWF9X,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCkC,KAAM,CACJE,MAAO,QAETyV,QAAS,CACP3H,SAAUlQ,EAAM8X,WAAWC,QAAQ,IACnCrV,WAAY1C,EAAM8X,WAAWE,mBAE/BC,WAAY,CACV9W,SAAU,WACV+W,KAAM,MACNvG,IAAK,WAIM,SAASwG,GAAT,GAAyC,IAAxBnQ,EAAuB,EAAvBA,KAAMf,EAAiB,EAAjBA,KAAMoP,EAAW,EAAXA,QACpCpV,EAAUnB,KADqC,EAEnBoS,mBAASjL,GAFU,oBAE9CmR,EAF8C,KAEnCC,EAFmC,OAGvBnG,oBAAS,GAHc,oBAG9CC,EAH8C,KAGrCC,EAHqC,KAI/CkG,EAAe,WACnBlG,GAAW,GACX9S,QAAQC,IAAI6Y,GACZtR,GAAgBG,EAAMmR,GACnB5R,MAAK,WACJ6P,EAAQ+B,GACRhG,GAAW,MAEZmG,OAAM,SAAAC,GAAG,OAAI,kBAAC,GAAD,CAAO/I,QAAS+I,QAElC,OACE,yBAAKpX,UAAWH,EAAQiB,MACrBiQ,GAAW,kBAACsG,GAAA,EAAD,CAAkBhX,KAAM,GAAIL,UAAWH,EAAQgX,cACzD9F,GAAoB,UAATnK,GACX,oCACE,kBAAC0Q,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACEC,WAAY,kBAAC,KAAD,MACZC,gBAAc,kBACdrR,GAAG,kBAEH,kBAAC9F,EAAA,EAAD,CAAYN,UAAWH,EAAQ4W,SAA/B,YAEF,kBAACf,GAAD,CACE7P,KAAMmR,EACN/B,QAASgC,EACTtB,oBAAqBuB,KAGzB,kBAACI,GAAA,EAAD,CACEI,UAAWzO,GAAiB,gBAAiBpD,GAAMwC,cAEnD,kBAACkP,GAAA,EAAD,CACEC,WAAY,kBAAC,KAAD,MACZC,gBAAc,kBACdrR,GAAG,kBAEH,kBAAC9F,EAAA,EAAD,CAAYN,UAAWH,EAAQ4W,SAA/B,cAEF,kBAACzB,GAAD,CACEnP,KAAMmR,EACN/B,QAASgC,EACT/B,sBAAuBgC,EACvB7M,OAAQ2M,EAAUhN,SAASK,OAC3BjE,GAAI4Q,EAAU5Q,MAGlB,kBAACkR,GAAA,EAAD,CACEI,UAAWzO,GAAiB,gBAAiBpD,GAAM2C,kBAEnD,kBAAC+O,GAAA,EAAD,CACEC,WAAY,kBAAC,KAAD,MACZC,gBAAc,kBACdrR,GAAG,kBAEH,kBAAC9F,EAAA,EAAD,CAAYN,UAAWH,EAAQ4W,SAC5B,IADH,kBAKF,kBAACpB,GAAA,EAAD,KACE,kBAACmB,GAAD,CACE3Q,KAAMmR,EACN/B,QAASgC,EACTU,0BAA2BT,OAM3B,UAATtQ,GAAoB,kBAAC,GAAD,CAAOyH,QAAS,kC,4HCzFrCuJ,GAAc,CAClBC,QAASC,KACTC,QAASC,KACTrJ,MAAOsJ,KACPC,KAAMC,KAGFC,GAAazZ,aAAW,SAAAC,GAAK,MAAK,CACtCiZ,QAAS,CACPrH,gBAAiB6H,KAAM,MAEzB1J,MAAO,CACL6B,gBAAiB5R,EAAM6P,QAAQE,MAAMC,MAEvCsJ,KAAM,CACJ1H,gBAAiB5R,EAAM6P,QAAQlH,QAAQkJ,MAEzCsH,QAAS,CACPvH,gBAAiB8H,KAAM,MAEzB7F,KAAM,CACJ3D,SAAU,IAEZyJ,YAAa,CACXhX,QAAS,GACThC,YAAaX,EAAMS,QAAQ,IAE7BgP,QAAS,CACPmK,QAAS,OACT1I,WAAY,cAIhB,SAAS2I,GAAyBjG,GAChC,IAAM3S,EAAUuY,KACRpY,EAAmDwS,EAAnDxS,UAAWqO,EAAwCmE,EAAxCnE,QAASqK,EAA+BlG,EAA/BkG,QAASnY,EAAsBiS,EAAtBjS,QAAYoY,EAFV,aAEoBnG,EAFpB,6CAGjCoG,EAAOhB,GAAYrX,GAEzB,OACE,kBAACsY,GAAA,EAAD,eACE7Y,UAAW8Y,aAAKjZ,EAAQU,GAAUP,GAClC+Y,mBAAiB,kBACjB1K,QACE,0BAAMjI,GAAG,kBAAkBpG,UAAWH,EAAQwO,SAC5C,kBAACuK,EAAD,CAAM5Y,UAAW8Y,aAAKjZ,EAAQ4S,KAAM5S,EAAQ0Y,eAC3ClK,GAGL2K,OAAQ,CACN,kBAAC7Y,EAAA,EAAD,CACElD,IAAI,QACJgc,aAAW,QACX/Z,MAAM,UACNkB,QAASsY,GAET,kBAAC,KAAD,CAAW1Y,UAAWH,EAAQ4S,UAG9BkG,IAYV,IAAMO,GAAava,aAAW,SAAAC,GAAK,MAAK,CACtCsQ,OAAQ,CACNA,OAAQtQ,EAAMS,QAAQ,QAIX,SAAS8Z,GAAT,GAA2C,IAArB5Y,EAAoB,EAApBA,QAAS8N,EAAW,EAAXA,QAAW,GACvC6K,KACQE,IAAMtI,UAAS,IAFgB,oBAEhDuI,EAFgD,KAE1CC,EAF0C,KAGjDC,EAAc,SAAC7L,EAAO8L,GACX,cAAXA,GAIJF,GAAQ,IAGV,OACE,6BACE,kBAACG,GAAA,EAAD,CACEC,aAAc,CACZC,SAAU,SACVC,WAAY,QAEdP,KAAMA,EACNQ,iBAAkB,IAClBnB,QAASa,GAET,kBAACd,GAAD,CACEC,QAASa,EACThZ,QAASA,EACT8N,QAASA,M,ICCJyL,G,YAjGb,WAAYtH,GAAQ,IAAD,8BACjB,4CAAMA,KAqBRyC,QAAU,SAAArP,GAAO,OAAI,EAAKmU,SAAS,CAAElU,KAAMD,KApBzC,EAAKoU,MAAQ,CACXnU,KAAM,KACNoU,aAAa,EACbvG,SAAU,GACVwG,gBAAgB,GAEH,UAAf1H,EAAM5L,KACFxC,GAAQ,EAAKoO,MAAM2H,QAAQ/U,MAAK,SAAAgV,GAAG,OACjC,EAAKL,SAAS,CAAElU,KAAMuU,EAAKH,aAAa,OAE1ChW,GAAc,EAAKuO,MAAM2H,QAAQ/U,MAAK,SAAAgV,GAAG,OACvC,EAAKL,SAAS,CAAElU,KAAMuU,EAAKH,aAAa,OAE3B,cAAfzH,EAAM5L,MAAyB,EAAKoT,MAAMC,aAC5C,EAAKF,SAAS,CACZrG,SAAUzI,GAAmBuH,EAAM7S,SAAU,EAAKqa,MAAMnU,MACxDqU,eAAgB9Q,GAAiB,gBAAiB,EAAK4Q,MAAMnU,QAlBhD,E,sEAuBT,IAAD,SACuBwU,KAAKL,MAA3BnU,EADD,EACCA,KAAMoU,EADP,EACOA,YADP,EAE4BI,KAAK7H,MAAhC5L,EAFD,EAECA,KAAMjH,EAFP,EAEOA,SAAUwa,EAFjB,EAEiBA,OACxB,OACE,8BACIF,GAAe7Q,GAAiB,gBAAiBvD,IACjD,oCACE,kBAAC,IAAD,CACElB,KAAI,wBAAmBkB,EAAKO,GAAxB,aACJmM,OAAQ,SAAAC,GAAK,OACX,kBAACiB,GAAD,iBACMjB,EADN,CAEEkB,SAAUzI,GAAmBtL,EAAUkG,GACvC2J,cAAelG,GACb3J,EAASkB,GAAGsK,OACZtF,GAEFA,KAAMA,EACNe,KAAMA,EACNjH,SAAUA,QAIhB,kBAAC,IAAD,CACEgF,KAAI,wBAAmBkB,EAAKO,GAAxB,WACJmM,OAAQ,SAAAC,GAAK,OACX,kBAACF,GAAD,iBACME,EADN,CAEE5L,KAAMA,EACNf,KAAMA,EACNlG,SAAUA,QAIhB,kBAAC,IAAD,CACEgF,KAAI,wBAAmBkB,EAAKO,GAAxB,kBACJmM,OAAQ,SAAAC,GAAK,OAAI,kBAAC,GAAkBA,MAEtC,kBAAC,IAAD,CACE7N,KAAI,wBAAmBkB,EAAKO,GAAxB,UACJmM,OAAQ,SAAAC,GAAK,OACX,kBAACuE,GAAD,iBACMvE,EADN,CAEE5L,KAAMA,EACNf,KAAM,EAAKmU,MAAMnU,KACjBoP,QAAS,EAAKA,gBAMtBgF,IACC7Q,GAAiB,gBAAiBvD,KACzB,UAATe,EACC,oCACE,kBAAC,IAAD,CAAUlG,GAAE,wBAAmByZ,EAAnB,YACZ,kBAAChB,GAAD,CACE5Y,QAAS,QACT8N,QAAS,mCAEX,kBAAC0I,GAAD,CACEnQ,KAAMA,EACNf,KAAMwU,KAAKL,MAAMnU,KACjBoP,QAASoF,KAAKpF,WAIlB,kBAAC,GAAD,CAAO5G,QAAS,gCAEnB4L,GAAe,kBAAC7I,GAAA,EAAD,W,GA7FEkJ,aCTpB5b,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCkC,KAAM,CACJ0X,QAAS,QAEXzZ,OAAO,eACJH,EAAM2b,YAAYC,GAAG,MAAQ,CAC5BxZ,MARc,IASdyZ,WAAY,IAGhB5b,OAAO,eACJD,EAAM2b,YAAYC,GAAG,MAAQ,CAC5BxZ,MAAM,eAAD,OAdS,IAcT,OACL5B,WAfc,MAkBlBsb,WAAW,aACTnb,YAAaX,EAAMS,QAAQ,IAC1BT,EAAM2b,YAAYC,GAAG,MAAQ,CAC5BhC,QAAS,SAGbmC,QAAS/b,EAAMgc,OAAOD,QACtBE,YAAa,CACX7Z,MA1BgB,KA4BlB8Z,QAAS,CACP3b,SAAU,EACV+B,QAAStC,EAAMS,QAAQ,IAEzB0b,cAAe,CACb/Z,MAAO,OACPuN,OAAQ,QAuFGyM,OAnFf,YAUI,IATFzL,EASC,EATDA,MAEAzS,GAOC,EARDgB,SAQC,EAPDhB,SACA8E,EAMC,EANDA,UACAqZ,EAKC,EALDA,WACAvb,EAIC,EAJDA,cACAC,EAGC,EAHDA,SACAub,EAEC,EAFDA,eACAC,EACC,EADDA,cAEMtb,EAAUnB,KACV0c,EAAe,SAAAtU,GACfA,IAASuU,IACXC,EAAoBxU,GACpBhK,EAAQ8O,KAAR,wBAA8B2D,EAAMjS,OAAO6c,OAA3C,YAAqDrT,EAArD,QALH,EAQ+CgK,mBAAS,YARxD,oBAQMuK,EARN,KAQwBC,EARxB,OAScxK,mBACboK,EAAejV,QAAO,SAAAsV,GAAI,OAAIA,EAAKnV,KAAOmJ,EAAMjS,OAAO6c,UAAQ7X,OAAS,EACpE,QACA6Y,EAAclV,QAAO,SAAAsV,GAAI,OAAIA,EAAKnV,KAAOmJ,EAAMjS,OAAO6c,UAAQ7X,OAAS,EACvE,aACA,aALCsE,EATN,qBAiBD,OACE,yBAAK5G,UAAWH,EAAQiB,MACtB,kBAAC0a,GAAA,EAAD,MACA,yBAAKxb,UAAWH,EAAQd,OAAQka,aAAW,mBACzC,kBAACwC,GAAA,EAAD,CAAQC,MAAI,EAACC,eAAe,OAC1B,kBAACC,GAAA,EAAD,CACEha,UAAWA,EACXrB,QAAQ,YACRsb,OAAQ,OACRxC,KAAM4B,EACNvC,QAAShZ,EACTG,QAAS,CACPmP,MAAOnP,EAAQgb,aAEjBiB,WAAY,CACVC,aAAa,IAGf,6BACE,yBAAK/b,UAAWH,EAAQ8a,UACxB,kBAAChU,GAAD,CAAeC,KAAMA,EAAMxG,QAASgb,OAI1C,kBAACK,GAAA,EAAD,CAAQO,QAAM,EAACL,eAAe,OAC5B,kBAACC,GAAA,EAAD,CACE/b,QAAS,CACPmP,MAAOnP,EAAQgb,aAEjBta,QAAQ,YACR8Y,MAAI,GAEJ,6BACE,yBAAKrZ,UAAWH,EAAQ8a,UACxB,kBAAChU,GAAD,CAAeC,KAAMA,EAAMxG,QAASgb,QAK5C,0BAAMpb,UAAWH,EAAQib,SAErB,oCACE,kBAAC,GAAD,CACEhe,QAASA,EACT8J,KAAMA,EACNuT,OAAQ5K,EAAMjS,OAAO6c,OACrBxa,SAAUA,IAEZ,yBAAKK,UAAWH,EAAQkb,oB,oBC5G9BkB,GAAWC,aAAgB9C,IAAO,CAAE+C,eAAe,IAE1C,SAASC,GAAT,GAAwC,IAApBC,EAAmB,EAAnBA,gBACjC,OACE,kBAACxM,GAAA,EAAD,KACE,kBAAC3I,GAAA,EAAD,CAAMoV,UAAW,kBAACC,GAAA,EAAD,+BACdF,EAAgB3Z,KAAI,SAAA6Y,GACnB,OACE,kBAACpU,GAAA,EAAD,CACE2I,WAAW,aACX7S,IAAKse,EAAKnV,GACVgB,QAAM,EACN5G,UAAWC,IACXC,GAAE,wBAAmB6a,EAAKnV,GAAxB,cAEF,kBAACiB,GAAA,EAAD,CACEmV,SACE,kBAACP,GAAD,CACE5b,KAAM,KACNoc,KAAMlB,EAAKmB,aAAaC,kBAI9B,kBAACrV,GAAA,EAAD,CACErK,IAAKse,EAAKnV,GAAK,SACfmB,QAASgU,EAAK5a,KACdgQ,UACE,kBAAC,IAAMZ,SAAP,CAAgB9S,IAAKse,EAAKnV,GAAK,aAC7B,kBAAC9F,EAAA,EAAD,CACErD,IAAKse,EAAKnV,GAAK,OACf5F,UAAU,OACVD,QAAQ,QACRrB,MAAM,eAELmE,GAAkBkY,EAAKnY,WAAYmY,EAAKqB,oB,ICIhDC,G,YA5Cb,WAAYrK,GAAQ,IAAD,8BACjB,4CAAMA,KACDwH,MAAQ,CACX8C,iBAAkB,KAClBC,iBAAkB,KAClBC,YAAY,EACZC,aAAa,EACbZ,gBAAiB,MAEnBhY,GAAmB,EAAKmO,MAAM7S,SAASkB,GAAGuF,IAAIhB,MAAK,SAAAgV,GACjD,EAAKL,SAAS,CACZsC,gBAAiBrZ,GAAgBoX,EAAI8C,uBACrCF,YAAY,OAGhBzY,KAAsBa,MAAK,SAAA+X,GAAK,OAC9B,EAAKpD,SAAS,CACZgD,iBAAkB/Z,GAAgBma,GAClCF,aAAa,OAlBA,E,sEAuBT,IAAD,EAMH5C,KAAKL,MAJPqC,EAFK,EAELA,gBACAU,EAHK,EAGLA,iBACAC,EAJK,EAILA,WACAC,EALK,EAKLA,YAEF,OACE,qCACID,IAAeC,GACf,kBAACb,GAAD,CACEC,gBAAiBA,EACjBU,iBAAkBA,IAGrBE,GAAeD,GAAc,kBAAC5L,GAAA,EAAD,W,GAvCRkJ,a,UCFxB5b,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCwe,IAAK,CACHC,aAAc,OACdnO,OAAQ,OACRX,OAAQ,OACRqC,SAAU,MACV1P,QAAStC,EAAMS,QAAQ,IAEzBoT,KAAM,CACJ3D,SAAU,SAEZwO,KAAM,CACJpc,QAAStC,EAAMS,QAAQ,QAGZ,SAASke,KACtB,IAAM1d,EAAUnB,KAChB,OACE,oCACE,kBAAC8e,GAAA,EAAD,CAAKxd,UAAWH,EAAQud,IAAKK,QAAQ,oBACnC,kBAAC9b,EAAA,EAAD,CACEC,WAAS,EACT5B,UAAWH,EAAQyd,KACnB1L,UAAU,SACV9B,WAAW,SACXzQ,QAAS,GAET,kBAACsC,EAAA,EAAD,CAAME,MAAI,GACR,kBAAC,IAAD,CAAuB7B,UAAWH,EAAQ4S,QAE5C,kBAAC9Q,EAAA,EAAD,CAAME,MAAI,GACR,kBAACvB,EAAA,EAAD,CAAYpB,MAAM,cAAcqB,QAAQ,MAAxC,WAEF,kBAACoB,EAAA,EAAD,CAAME,MAAI,GACR,kBAACvB,EAAA,EAAD,CAAYpB,MAAM,gBAAgBqB,QAAQ,aAA1C,4CAKJ,kBAAC0G,GAAA,EAAD,Q,gICxCKyW,GAAmB,SAAChT,EAAY0D,GAC3C,IAAIuP,EAAgB,GADkC,uBAGtD,YAAuBjT,EAAvB,+CAAmC,CAAC,IAAzBC,EAAwB,QAE3BiT,EAAMna,KAAO,wBAEmB,IAApCkH,EAASC,gBAAgBtI,QACzBsb,EAAIC,UACFpa,KAAOkH,EAASG,WAAWgT,IAAI1P,EAAOzD,EAASF,KAAKrE,IAAK,WACzD3C,KAAOkH,EAAS8B,SAASqR,IAAI1P,EAAOzD,EAASF,KAAKrE,IAAK,aAGzDuX,EAAc/R,KAAKjB,IAb+B,kFAgBtD,OAAOgT,GCHHjf,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCkC,KAAM,CACJE,MAAO,QAEThC,MAAO,CACL8P,SAAU,OAEZE,MAAO,CACLwB,gBAAiB5R,EAAM6P,QAAQsP,WAAW/O,OAE5CgP,KAAM,CACJxN,gBAAiB5R,EAAM6P,QAAQsP,WAAW/O,WAI/B,SAASiP,GAAT,GAAiC,IAATpY,EAAQ,EAARA,KAAQ,EACjBiL,mBAAS,IADQ,oBACtC1C,EADsC,KAC9B8P,EAD8B,KAE7C/M,qBAAU,WACR,IAAM9G,EAASxE,EAAKmE,SAASK,OACzB+D,EAAS,GAFC,uBAGd,YAAoB/D,EAApB,+CAA4B,CAAC,IAAlBE,EAAiB,+BAC1B,YAAmBA,EAAMC,MAAzB,+CAAgC,CAAC,IAAtBC,EAAqB,QAC9B2D,EAAOxC,KAAK/B,SAASZ,GAAiB,iBAAkBwB,GAAM5B,SAFtC,oFAHd,kFAQdqV,EAAU9P,KACT,CAACvI,IAXyC,MAYHiL,mBAAS,IAZN,oBAYtC6M,EAZsC,KAYvBQ,EAZuB,KAa7ChN,qBAAU,WACRgN,EAAiBT,GAAiBhS,GAAkB7F,EAAKmE,UAAWoE,MACnE,CAACA,EAAQvI,EAAKmE,WACjB,IAAMnK,EAAUnB,KAChB,OACE,oCACE,kBAACmR,GAAA,EAAD,CAAO7P,UAAWH,EAAQmP,MAAOoP,QAAM,EAACC,UAAW,IACjD,kBAACnX,GAAA,EAAD,CACElH,UAAWH,EAAQme,KACnB1B,UACE,kBAACC,GAAA,EAAD,KACE,kBAACjc,EAAA,EAAD,CAAYsP,MAAM,SAAS5P,UAAWH,EAAQb,OAA9C,oBAMH2e,GACCA,EAAcjb,KAAI,SAAAgL,GAAK,OACrB,oCACE,kBAACvG,GAAA,EAAD,CACEJ,MAAO,CAAEyJ,gBAAiB9C,EAAMjD,KAAKvL,OACrC4Q,WAAW,UAEX,kBAACxI,GAAA,EAAD,CAAcC,QAASmG,EAAM/M,KAAMgQ,UAAU,iBAE/C,kBAAC1J,GAAA,EAAD,aCpED,SAASqX,KACtB,OAAO,8BCDM,SAASC,KACtB,OAAO,8BCDM,SAASC,KACtB,OAAO,8BCDM,SAASC,KACtB,OAAO,8BCuBT,IAAM/f,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACrC8f,KAAM,CACJnL,UAAW,IACX3C,SAAU,KAEZ+N,QAAS,CACPpQ,OAAQ,QAEVzN,KAAM,CACJqV,SAAU,OACV5H,OAAQ,OAEV5N,KAAM,CACJmO,SAAU,oBAEZ2D,KAAM,CACJ3D,SAAU,SAEZsD,MAAO,CACLtD,SAAU,SAEZ6L,QAAS/b,EAAMgc,OAAOD,YAGlBiE,GAAaxF,IAAMyF,YAAW,SAAoBrM,EAAOsM,GAC7D,OAAO,kBAACC,GAAA,EAAD,eAAOnN,UAAU,KAAKkN,IAAKA,GAAStM,OAGvCwM,GAAO,CACXC,OAAQC,KACRC,UAAWC,KACXC,KAAMlH,IACNmH,UAAWC,KACXC,QAASC,MAGLC,GAAW,SAACC,EAAerd,GAAhB,OACfqd,IAAkBrd,EAAS,EAAI,EAAIqd,EAAgB,GAC/CC,GAAW,SAAAC,GAEf,OADA3hB,QAAQC,IAAI0hB,GACJA,GACN,IAAK,SACH,OAAO,IACT,IAAK,YACH,OAAO,IACT,IAAK,OAEL,IAAK,YAEL,IAAK,UACH,OAAO,IACT,UAAKnX,EACH,OAAO,IACT,QACE,OAAO,MAIE,SAASoX,GAAT,GAA+B,IAAVvQ,EAAS,EAATA,MAAS,EACbuB,oBAAS,GADI,oBACpCC,EADoC,KAC3BC,EAD2B,OAEnBF,mBAAS,MAFU,oBAEpCjL,EAFoC,KAE9BoP,EAF8B,OAGjBnE,mBAAS,MAHQ,oBAGpCnC,EAHoC,KAG7BoR,EAH6B,OAIzBjP,mBAAS,CACzB,SACA,YACA,OACA,YACA,YALKkP,EAJoC,uBAWDlP,oBAAU,GAXT,oBAWpC6O,EAXoC,KAWrBM,EAXqB,KAYrCC,EAAmB9G,IAAM+G,OAAOR,GACtCO,EAAiBE,QAAUT,EAkB3BxO,qBAAU,WACR,IAAMkP,EAAUC,aAAY,WAC1Blc,GAAQmL,EAAMjS,OAAO6c,QAClB/U,MAAK,SAAAS,GAAI,OAAIoP,EAAQpP,MACrBsR,OAAM,SAAAC,GAAG,OAAI2I,EAAS3I,EAAI/I,YAC7B4R,EAAiBP,GAASQ,EAAiBE,QAASJ,EAAQ1d,SAC5D0O,GAAW,KACV4O,GAASI,EAAQE,EAAiBE,WACrC,OAAO,WACLG,aAAaF,MAEd,CAAC9Q,EAAMjS,OAAO6c,OAAQwF,EAAeK,IACxC,IAAMngB,EAAUnB,KAChB,OACE,6BACGqS,GAAW,kBAACK,GAAA,EAAD,MACXzC,GAAS,kBAAC,GAAD,CAAON,QAASM,KACxBoC,GAAWlL,GACX,kBAAC2a,GAAA,EAAD,CAAQC,YAAU,EAACpH,MAAM,EAAMqH,oBAAqB9B,IAClD,kBAACjd,EAAA,EAAD,CACE3B,UAAWH,EAAQiB,KACnBc,WAAS,EACTyP,QAAQ,eACRO,UAAU,MACV9B,WAAW,UAUX,kBAACnO,EAAA,EAAD,CAAME,MAAI,GACR,kBAACvB,EAAA,EAAD,CAAYN,UAAWH,EAAQc,MAAOkF,EAAKlF,OAE7C,kBAACgB,EAAA,EAAD,CAAME,MAAI,GACR,kBAAC8e,GAAA,EAAD,CAAMC,UAAQ,EAAChe,MAAO+c,GACnBK,EAAQtd,KAAI,SAAAmd,GACX,IAAMgB,EAAW7B,GAAKa,GACtB,OACE,kBAACiB,GAAA,EAAD,CACE7jB,IAAK4iB,EACLzN,MACE,kBAAC9R,EAAA,EAAD,CAAYN,UAAWH,EAAQuS,OAC5ByN,GAGLpN,KAAM,kBAACoO,EAAD,CAAU7gB,UAAWH,EAAQ4S,eAO/C,yBAAKzS,UAAWH,EAAQ8a,UAzEN,WACxB,OAAQqF,EAAQL,IACd,IAAK,SACH,OAAO,kBAAC1B,GAAD,CAAcpY,KAAMA,IAC7B,IAAK,YACH,OAAO,kBAACyY,GAAD,CAAazY,KAAMA,IAC5B,IAAK,OACH,OAAO,kBAAC0Y,GAAD,CAAY1Y,KAAMA,IAC3B,IAAK,YACH,OAAO,kBAAC4Y,GAAD,CAAiB5Y,KAAMA,IAChC,IAAK,UACH,OAAO,kBAAC2Y,GAAD,CAAe3Y,KAAMA,IAC9B,QACE,OAAO,kBAAC,GAAD,OA6DJkb,KClJX,IAAMrK,GAAa,CACjBsK,WAAY,CACV,mBACA,YACA,mBACA,sBACA,mBACA,qBACAC,KAAK,MAGHC,GAAY,CAChBzS,QAAS,CACPlH,QAAS4Z,KACTxQ,UAAWyQ,KACX1S,KAAM,QAERgI,WAAYA,IAER2K,GAAa,CACjB5S,QAAS,CACPlH,QAAS4Z,KACTxQ,UAAWyQ,KACX1S,KAAM,SAERgI,WAAYA,IA4HC4K,G,YAzHb,WAAY9O,GAAQ,IAAD,6BACjBtU,QAAQC,IAAI,UACZ,4CAAMqU,KA0BR9S,cAAgB,WACd,EAAKqa,SAAS,CAAEkB,YAAa,EAAKjB,MAAMiB,cA7BvB,EA+BnBrb,UAAY,WACV,EAAKma,SAAS,CACZpa,SAAU,KACV4hB,UAAU,EACVvE,YAAY,EACZwE,cAAc,IAEhBljB,KAtCiB,EAyCnBmjB,gBAAkB,WAChB,IAAIC,EACgC,UAAlC,EAAK1H,MAAMpb,MAAM6P,QAAQC,KAAmBwS,GAAYG,GAC1D,EAAKtH,SAAS,CACZnb,MAAO8iB,KA1CT,EAAK1H,MAAQ,CACXra,SAAU,EAAK6S,MAAM7S,SACrB4hB,SAAU9iB,IACVG,MAAOsiB,GACPjG,YAAY,EACZE,cAAe,KACfD,eAAgB,KAChByG,aAAa,EACb3E,YAAY,GAEV,EAAKhD,MAAMuH,WACbld,GAAmB,EAAK2V,MAAMra,SAASkB,GAAGuF,IAAIhB,MAAK,SAAAgV,GAAG,OACpD,EAAKL,SAAS,CACZoB,cAAenY,GAAgBoX,EAAI8C,uBACnCF,YAAY,OAGhBzY,GAAoB,EAAKyV,MAAMra,SAASkB,GAAGuF,IAAIhB,MAAK,SAAAgV,GAAG,OACrD,EAAKL,SAAS,CACZmB,eAAgBlY,GAAgBoX,GAChCoH,cAAc,QAvBH,E,sEAiDT,IAAD,SAUHnH,KAAKL,MARPuH,EAFK,EAELA,SACA5hB,EAHK,EAGLA,SACAf,EAJK,EAILA,MACAqc,EALK,EAKLA,WACAE,EANK,EAMLA,cACAD,EAPK,EAOLA,eACAsG,EARK,EAQLA,aACAxE,EATK,EASLA,WAEI4E,EAAWC,YAAejjB,GAChC,OACE,oCACE,kBAACkjB,GAAA,EAAD,CAAeljB,MAAOgjB,GACpB,kBAACpG,GAAA,EAAD,MACA,kBAAC,IAAD,CAAQuG,SAAUnlB,IAChB,kBAAC,EAAD,CACE+C,SAAUA,EACVC,UAAWya,KAAKza,UAChBF,cAAe2a,KAAK3a,iBAEpBsd,GAAcwE,IAAiBD,GAAY,kBAACnQ,GAAA,EAAD,MAC3C4L,GAAewE,IAAgBD,EA6B/B,kBAAC,IAAD,KACE,kBAAC,IAAD,CACES,OAAK,EACLrd,KAAK,IACL4N,OAAQ,SAAAC,GAAK,OAAI,kBAAC+K,GAAmB/K,MAEvC,kBAAC,IAAD,CAAO7N,KAAK,mBAAmBnE,UAAWsf,MAlC5C,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEkC,OAAK,EACLrd,KAAI,UAAK/H,GAAL,iBACJ2V,OAAQ,SAAAC,GAAK,OACX,kBAAC,GAAD,iBAAqBA,EAArB,CAA4B7S,SAAUA,QAG1C,kBAAC,IAAD,CAAOgF,KAAK,mBAAmBnE,UAAWsf,KAE1C,kBAAC,IAAD,CACEnb,KAAK,yBACL4N,OAAQ,SAAAC,GAAK,OACX,kBAAC,GAAD,iBACMA,EADN,CAEE7S,SAAUA,EACVsb,WAAYA,EACZvb,cAAe,EAAKA,cACpBwb,eAAgBA,EAChBC,cAAeA,QAIrB,kBAAC,IAAD,CAAO6G,OAAK,EAACrd,KAAK,KAChB,kBAAC,IAAD,CAAUjE,GAAG,qBAcrB,kBAAC,EAAD,CACEe,UAAW7C,EAAM6P,QAAQC,KACzBhN,cAAe2Y,KAAKoH,wB,GAlHdnH,aCzCE2H,QACW,cAA7BpkB,OAAOC,SAASokB,UAEe,UAA7BrkB,OAAOC,SAASokB,UAEhBrkB,OAAOC,SAASokB,SAAS3S,MACvB,4DpCPwB,WAC5B,IAAM4S,EAAOtkB,OAAOC,SAASqkB,KAAK3jB,QAAQ,KAAM,IAC1C4jB,EAAa,IAAI7kB,gBAAgB4kB,GAOvC,GANIC,EAAW/jB,IAAI,iBACjBlB,aAAaklB,QACXrlB,EAAgB,eAChBolB,EAAWE,IAAI,iBAGfF,EAAW/jB,IAAI,cAAe,CAGhC,IAAMkkB,EAAmBH,EAAWE,IAAI,cAAgB,IAClDE,EAAiB,IAAIrf,MACzB,IAAIA,MAAOsf,UAA+B,IAAnBF,GAEzBplB,aAAaklB,QACXrlB,EAAgB,kBAChBwlB,EAAe9d,eAInB,IAAM8d,EAAiBrlB,aAAaC,QAAQJ,EAAgB,mBACxDwlB,GAAkB,IAAIrf,MAAU,IAAIA,KAAKqf,IAC3ClkB,IAGE8jB,EAAW/jB,IAAI,iBACjBvB,EAAQ0B,Q,yVAAR,IAAqB1B,EAAQgB,SAA7B,CAAuCqkB,KAAM,QAI/C,IAAMO,EAAevlB,aAAaC,QAAQJ,EAAgB,iBACtD0lB,IACF7kB,OAAOC,SAASU,QAAQkkB,GACxBvlB,aAAaoB,WAAWvB,EAAgB,kBAG1C,IAAM2H,EAAO9G,OAAOC,SAAS6kB,SAChB,MAAThe,GAAiBlG,MACnBtB,aAAaklB,QAAQrlB,EAAgB,gBAAiB2H,GACtDtH,KqC5CJulB,GACInkB,IjC4BuB0F,GAAY,OiC3B7BiB,MAAK,SAAAwB,GACXic,IAAStQ,OAAO,kBAAC,GAAD,CAAK5S,SAAUiH,IAAUkc,SAASC,eAAe,YAGnEF,IAAStQ,OAAO,kBAAC,GAAD,CAAK5S,SAAU,KAAQmjB,SAASC,eAAe,SDmH3D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9d,MAAK,SAAAgG,GACjCA,EAAa+X,kB","file":"static/js/main.acc11c5a.chunk.js","sourcesContent":["export const PRODUCTION = process.env.NODE_ENV === 'production'\n\nexport const WCA_ORIGIN = PRODUCTION\n  ? 'https://www.worldcubeassociation.org'\n  : 'https://staging.worldcubeassociation.org'\n\nexport const WCA_OAUTH_CLIENT_ID = PRODUCTION\n  ? process.env.WCA_CLIENT_ID\n  : 'example-application-id'\n","import { createBrowserHistory } from 'history'\n\nconst history = createBrowserHistory()\n\nexport default history\n","import { WCA_ORIGIN, WCA_OAUTH_CLIENT_ID } from './wca-env'\nimport history from './history'\n\n/* Use separate set of keys for each OAuth client (e.g. for WCA production and staging). */\nconst localStorageKey = key => `WCA-Real-Time.${WCA_OAUTH_CLIENT_ID}.${key}`\n\n/**\n * Checks the URL hash for presence of OAuth access token\n * and saves it in the local storage if it's found.\n * Should be called on application initialization (before any kind of router takes over the location).\n */\nexport const initializeAuth = () => {\n  const hash = window.location.hash.replace(/^#/, '')\n  const hashParams = new URLSearchParams(hash)\n  if (hashParams.has('access_token')) {\n    localStorage.setItem(\n      localStorageKey('accessToken'),\n      hashParams.get('access_token')\n    )\n  }\n  if (hashParams.has('expires_in')) {\n    /* Expire the token 15 minutes before it actually does,\n       this way it doesn't expire right after the user enters the page. */\n    const expiresInSeconds = hashParams.get('expires_in') - 15 * 60\n    const expirationTime = new Date(\n      new Date().getTime() + expiresInSeconds * 1000\n    )\n    localStorage.setItem(\n      localStorageKey('expirationTime'),\n      expirationTime.toISOString()\n    )\n  }\n  /* If the token expired, sign the user out. */\n  const expirationTime = localStorage.getItem(localStorageKey('expirationTime'))\n  if (expirationTime && new Date() >= new Date(expirationTime)) {\n    signOut()\n  }\n  /* Clear the hash if there is a token. */\n  if (hashParams.has('access_token')) {\n    history.replace({ ...history.location, hash: null })\n  }\n\n  /* Check if we know what path to redirect to (after OAuth redirect). */\n  const redirectPath = localStorage.getItem(localStorageKey('redirectPath'))\n  if (redirectPath) {\n    window.location.replace(redirectPath)\n    localStorage.removeItem(localStorageKey('redirectPath'))\n  }\n  /* If non-signed in user tries accessing a competition path, redirect to OAuth sign in straightaway. */\n  const path = window.location.pathname\n  if (path !== '/' && !isSignedIn()) {\n    localStorage.setItem(localStorageKey('redirectPath'), path)\n    signIn()\n  }\n}\n\nexport const wcaAccessToken = () =>\n  localStorage.getItem(localStorageKey('accessToken'))\n\nexport const signIn = () => {\n  const params = new URLSearchParams({\n    client_id: WCA_OAUTH_CLIENT_ID,\n    response_type: 'token',\n    redirect_uri: oauthRedirectUri(),\n    scope: 'public manage_competitions dob email'\n  })\n  window.location = `${WCA_ORIGIN}/oauth/authorize?${params.toString()}`\n}\n\nconst oauthRedirectUri = () => {\n  const appUri = window.location.origin\n  console.log(appUri)\n  const searchParams = new URLSearchParams(window.location.search)\n  const stagingParam = searchParams.has('staging')\n  return stagingParam ? `${appUri}?staging=true` : appUri\n}\n\nexport const signOut = () => {\n  localStorage.removeItem(localStorageKey('accessToken'))\n  window.location.replace('/')\n}\n\nexport const isSignedIn = () => !!wcaAccessToken()\n","import React, { Fragment } from 'react'\nimport { Link } from 'react-router-dom'\nimport AppBar from '@material-ui/core/AppBar'\nimport Button from '@material-ui/core/Button'\nimport IconButton from '@material-ui/core/IconButton'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { signIn, isSignedIn } from '../../server/auth'\nimport FlipCameraAndroidIcon from '@material-ui/icons/FlipCameraAndroid'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport { isMobile } from 'react-device-detect'\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1\n  },\n  title: {\n    textDecoration: 'none',\n    color: 'white',\n    flexGrow: 1,\n    marginLeft: theme.spacing(1)\n  },\n  titleIcon: {\n    marginRight: theme.spacing(2)\n  },\n  username: {\n    marginRight: theme.spacing(1)\n  }\n}))\n\nconst Header = ({ setMobileOpen, userInfo, onSignOut }) => {\n  const classes = useStyles()\n  return (\n    <AppBar position='sticky' color='primary' className={classes.appBar}>\n      <Toolbar spacing={2} className={classes.titleIcon}>\n        {isMobile && (\n          <IconButton onClick={setMobileOpen} className={classes.titleIcon}>\n            <MenuIcon size={10} />\n          </IconButton>\n        )}\n        <FlipCameraAndroidIcon />\n        <Typography\n          variant='h6'\n          className={classes.title}\n          component={Link}\n          to={'/'}\n        >\n          myComp\n        </Typography>\n        {userInfo && isSignedIn() ? (\n          <Fragment>\n            <Typography variant='subtitle1' className={classes.username}>\n              {userInfo.name}\n            </Typography>\n            <Button color='inherit' onClick={onSignOut}>\n              Hello, {userInfo.me.name}\n            </Button>\n          </Fragment>\n        ) : (\n          <Button color='inherit' onClick={signIn}>\n            Sign in with the WCA\n          </Button>\n        )}\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Link from '@material-ui/core/Link'\n// import Typography from '@material-ui/core/Typography';\nimport InfoIcon from '@material-ui/icons/Info'\nimport ContactMailIcon from '@material-ui/icons/ContactMail'\nimport EmojiObjectsIcon from '@material-ui/icons/EmojiObjects'\nimport { makeStyles } from '@material-ui/core/styles'\nimport GitHubIcon from '@material-ui/icons/GitHub'\nimport { version } from '../../../package.json'\nimport { Tooltip } from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    position: 'absolute',\n    bottom: 0,\n    width: '100%',\n    overflow: 'hidden',\n    padding: theme.spacing(2)\n  },\n  grow: {\n    flexGrow: 1\n  },\n  link: {\n    verticalAlign: 'middle',\n    fontWeight: 500,\n    '&:hover': {\n      textDecoration: 'none',\n      opacity: 0.7\n    }\n  }\n}))\n\nconst Footer = ({ currTheme, onThemeChange }) => {\n  const classes = useStyles()\n  return (\n    <Grid container className={classes.root}>\n      <Grid item className={classes.grow} />\n      <Grid item>\n        <Grid container spacing={2}>\n          <Tooltip title={'Gitub'}>\n            <Grid item key='Github'>\n              <Link\n                className={classes.link}\n                variant='body2'\n                href={'https://github.com/saranshgrover/WCARealTime'}\n              >\n                <GitHubIcon />\n              </Link>\n            </Grid>\n          </Tooltip>\n          <Tooltip title={'Contact'}>\n            <Grid item key='Contact'>\n              <Link\n                className={classes.link}\n                variant='body2'\n                href={'mailto:ycubiksrube@gmail.com'}\n              >\n                <ContactMailIcon />\n              </Link>\n            </Grid>\n          </Tooltip>\n          <Tooltip\n            title={currTheme === 'light' ? 'Switch to Dark' : 'Switch to Light'}\n          >\n            <Grid item key='Theme'>\n              <Link\n                className={classes.link}\n                variant='body2'\n                onClick={onThemeChange}\n              >\n                <EmojiObjectsIcon />\n              </Link>\n            </Grid>\n          </Tooltip>\n          <Tooltip title={'About'}>\n            <Grid item key='Info'>\n              <Link className={classes.link} variant='body2' href={'/about'}>\n                <InfoIcon size={20} />\n              </Link>\n            </Grid>\n          </Tooltip>\n          <Grid item key='Version'>\n            <Link\n              className={classes.link}\n              variant='body2'\n              href={'https://github.com/saranshgrover/WCARealTime/releases'}\n            >\n              {version}\n            </Link>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default Footer\n","import moment from 'moment'\n\nexport const updateIn = (object, [property, ...properyChain], updater) =>\n  properyChain.length === 0\n    ? { ...object, [property]: updater(object[property]) }\n    : {\n        ...object,\n        [property]: updateIn(object[property], properyChain, updater)\n      }\n\nexport const mapIn = (object, properyChain, mapper) =>\n  updateIn(object, properyChain, array => array && array.map(mapper))\n\nexport const setIn = (object, properyChain, value) =>\n  updateIn(object, properyChain, () => value)\n\nconst sortOutput = (a, b) => (a > b ? 1 : b > a ? -1 : 0)\n\nexport const sortArrayBy = (arr, criteria) => {\n  return arr.sort((a, b) => sortOutput(a.criteria, b.criteria))\n}\nexport const sortArrayByDate = arr => {\n  return arr.sort((a, b) =>\n    sortOutput(new Date(a.start_date), new Date(b.start_date))\n  )\n}\n\nexport const compDatesToString = (start, end) => {\n  const today = moment()\n  if (today >= moment(start) && today <= moment(end)) {\n    return 'Happening Now!'\n  } else if (moment(start).isSame(new Date(), 'month')) {\n    return `In ${Math.floor(\n      moment.duration(moment(start).diff(today)).asDays()\n    )} Days!`\n  } else {\n    return `${moment(start).format('MMM Do')} - ${moment(end).format('Do')}`\n  }\n}\n\nexport const pick = (obj, keys) =>\n  keys.reduce((newObj, key) => ({ ...newObj, [key]: obj[key] }), {})\n\nexport const getPreciseTime = wcaTime => {\n  const wcaTimeStr = wcaTime.toString()\n  const time = `${wcaTimeStr.slice(0, -2)}.${wcaTimeStr.slice(-2)}`\n  return time\n}\n","import { WCA_ORIGIN } from './wca-env'\nimport { wcaAccessToken } from './auth'\nimport { pick } from './tools'\nimport moment from 'moment'\n\nexport const getWcifPublic = competitionId =>\n  wcaApiFetch(`/competitions/${competitionId}/wcif/public`)\n\nexport const getWcif = competitionId =>\n  wcaApiFetch(`/competitions/${competitionId}/wcif`)\n\nexport const getMyUpcomingComps = userId => {\n  return wcaApiFetch(`/users/${userId}?upcoming_competitions=true`)\n}\n\nexport const getAllUpcomingComps = pageNum => {\n  let today = moment().startOf('day')\n  let nextWeek = moment()\n    .add(7, 'days')\n    .startOf('day')\n  const params = new URLSearchParams({\n    start: today.toISOString(),\n    end: nextWeek.toISOString(),\n    page: pageNum\n  })\n  return wcaApiFetch(`/competitions?${params.toString()}`)\n}\n\nexport const getMyManagableComps = () => {\n  const today = moment().startOf('day')\n  const params = new URLSearchParams({\n    managed_by_me: true,\n    start: today.toISOString()\n  })\n  return wcaApiFetch(`/competitions?${params.toString()}`)\n}\n\nexport const getMe = () => wcaApiFetch(`/me`)\n\nconst wcaApiFetch = (path, fetchOptions = {}) => {\n  const baseApiUrl = `${WCA_ORIGIN}/api/v0`\n\n  return fetch(\n    `${baseApiUrl}${path}`,\n    Object.assign({}, fetchOptions, {\n      headers: new Headers({\n        Authorization: `Bearer ${wcaAccessToken()}`,\n        'Content-Type': 'application/json'\n      })\n    })\n  )\n    .then(response => {\n      if (!response.ok) throw new Error(response.statusText)\n      return response\n    })\n    .then(response => response.json())\n}\n\nconst updateWcif = (competitionId, wcif) =>\n  wcaApiFetch(`/competitions/${competitionId}/wcif`, {\n    method: 'PATCH',\n    body: JSON.stringify(wcif)\n  })\n\nexport const saveWcifChanges = (previousWcif, newWcif) => {\n  const keysDiff = Object.keys(newWcif).filter(\n    key => previousWcif[key] !== newWcif[key]\n  )\n  if (keysDiff.length === 0) return Promise.resolve()\n  return updateWcif(newWcif.id, pick(newWcif, keysDiff))\n}\n","import React from 'react'\nimport Divider from '@material-ui/core/Divider'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport NotificationsIcon from '@material-ui/icons/Notifications'\nimport AppsIcon from '@material-ui/icons/Apps'\nimport VideocamIcon from '@material-ui/icons/Videocam'\nimport GroupIcon from '@material-ui/icons/Group'\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount'\nimport NotesIcon from '@material-ui/icons/Notes'\n\nexport default function DashboardList({ user, onClick }) {\n  const getIcon = text => {\n    switch (text) {\n      case 'Projector':\n        return <VideocamIcon />\n      case 'Groups':\n        return <GroupIcon />\n      case 'Notifications':\n        return <NotificationsIcon />\n      case 'Admin':\n        return <SupervisorAccountIcon />\n      case 'Incidents':\n        return <NotesIcon />\n      default:\n        return <AppsIcon />\n    }\n  }\n  return (\n    <div style={{ marginTop: '15px' }}>\n      <Divider />\n      <List>\n        {['Overview', 'Groups', 'Notifications'].map(text => (\n          <ListItem button key={text} onClick={() => onClick(text)}>\n            <ListItemIcon>{getIcon(text)}</ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n      {user === 'admin' && (\n        <List>\n          {['Admin', 'Incidents'].map(text => (\n            <ListItem button key={text} onClick={() => onClick(text)}>\n              <ListItemIcon>{getIcon(text)}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n      )}\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function Notifications() {\n  return <div></div>\n}\n","const getExtensionId = extensionName => `realtime.${extensionName}`\n\nconst buildExtension = (extensionName, data) => ({\n  id: getExtensionId(extensionName),\n  specUrl: `http://localhost:3000/wcif-extensions/${extensionName}.json`,\n  data\n})\n\nexport const setExtensionData = (extensionName, wcifEntity, data) => {\n  const otherExtensions = wcifEntity.extensions.filter(\n    extension => extension.id !== getExtensionId(extensionName)\n  )\n  return {\n    ...wcifEntity,\n    extensions: [...otherExtensions, buildExtension(extensionName, data)]\n  }\n}\n\nconst defaultExtensionData = {\n  GeneralConfig: {\n    useProjector: false,\n    useGroups: false,\n    groupTool: '',\n    useTelegramNotif: false,\n    logoLink: undefined,\n    channelName: undefined\n  },\n  ScheduleConfig: {\n    delay: 0,\n    currentActivity: undefined,\n    pinnedMessage: undefined,\n    groupUpdate: undefined\n  }\n}\n\nexport const getExtensionData = (extensionName, wcifEntity) => {\n  const extension = wcifEntity.extensions.find(\n    extension => extension.id === getExtensionId(extensionName)\n  )\n  let defaultData = defaultExtensionData[extensionName]\n  if (defaultData === null) return extension && extension.data\n  return extension ? { ...defaultData, ...extension.data } : defaultData\n}\n\nexport const isExtensionSetup = (extensionName, wcifEntitiy) =>\n  wcifEntitiy.extensions.filter(\n    extension => extension.id === getExtensionId(extensionName)\n  ).length > 0\n\nexport const removeExtensionData = (extensionName, wcifEntity) => ({\n  ...wcifEntity,\n  extensions: wcifEntity.extensions.filter(\n    extension => extension.id !== getExtensionId(extensionName)\n  )\n})\n","import { getPreciseTime } from '../../../server/tools'\nimport moment from 'moment'\nimport { getExtensionData } from '../../../server/wcif'\n\nconst findEarlierActivityId = (activity1, activity2, schedule) => {\n  let aTime\n  let bTime\n  schedule.venues.forEach(venue =>\n    venue.rooms.forEach(room =>\n      room.activities.forEach(activity => {\n        activity.childActivities.forEach(childActivity => {\n          if (childActivity.id === activity1)\n            aTime = new Date(childActivity.startTime)\n          else if (childActivity.id === activity2)\n            bTime = new Date(childActivity.startTime)\n        })\n      })\n    )\n  )\n  return aTime - bTime\n}\n\n/**\n *\n * Returns an array of the users assignments in order of the schedule.\n *\n * @param  userInfo\n * @param  wcif\n */\nexport const getMyAssignmentsInOrder = (wcaId, wcif) => {\n  const regExp = /\\d{4}[A-Z]{4}\\d{2}/\n  const isWcaId = regExp.test(wcaId)\n  const user = wcif.persons.find(person =>\n    isWcaId ? person.wcaId === wcaId : person.wcaUserId === parseInt(wcaId)\n  )\n  if (!user) return null\n  const userAssignments = user.assignments\n  const schedule = wcif.schedule\n  return userAssignments.sort((a, b) =>\n    findEarlierActivityId(a.activityId, b.activityId, schedule)\n  )\n}\n\nexport const getMyEventsInOrder = (userInfo, wcif) => {\n  const userEvents = wcif.persons.find(\n    person => person.wcaId === userInfo.me.wca_id\n  ).registration.eventIds\n  const schedule = wcif.schedule\n  return userEvents.sort((a, b) => findEarlierEventId(a, b, schedule))\n}\n\nconst findEarlierEventId = (event1, event2, schedule) => {\n  let aTime\n  let bTime\n  schedule.venues.forEach(venue =>\n    venue.rooms.forEach(room =>\n      room.activities.forEach(activity => {\n        if (activity.activityCode === `${event1}-r1`)\n          aTime = new Date(activity.startTime)\n        else if (activity.activityCode === `${event2}-r1`)\n          bTime = new Date(activity.startTime)\n      })\n    )\n  )\n  return aTime - bTime\n}\nexport const flattenActivities = schedule => {\n  let flatActivites = []\n  for (const venue of schedule.venues) {\n    for (const room of venue.rooms) {\n      for (const activity of room.activities) {\n        flatActivites.push({ ...activity, room })\n        for (const childActivity of activity.childActivities)\n          flatActivites.push({ ...childActivity, room })\n      }\n    }\n  }\n  return flatActivites\n}\nexport const assignedTo = assignment => {\n  switch (assignment) {\n    case 'competitor':\n      return 'Compete'\n    case 'staff-judge':\n      return 'Judge'\n    case 'staff-runner':\n      return 'Run'\n    case 'staff-scrambler':\n      return 'Scramble'\n    default:\n      return 'Assigned for'\n  }\n}\n\n/**\n * Returns a list of data resembling\n * {start_date: , end_date: title:  }\n *\n * @param {*} events\n * @param {*} assignments\n */\nexport const getScheduleData = (\n  events = [],\n  unselectedVenues = [],\n  unselectedAssignments = [],\n  assignments,\n  activities\n) => {\n  let data = []\n\n  for (const assignment of assignments) {\n    const activity = activities.find(\n      activity => activity.id === assignment.activityId\n    )\n    if (\n      !events.includes(\n        activity.activityCode.slice(0, activity.activityCode.indexOf('-'))\n      ) &&\n      !unselectedVenues.includes(activity.room.id) &&\n      !unselectedAssignments.includes(assignment.assignmentCode)\n    )\n      data.push({\n        startDate: activity.startTime,\n        endDate: activity.endTime,\n        title: `${assignedTo(assignment.assignmentCode)} in ${activity.name}`,\n        assignmentCode: assignment.assignmentCode,\n        activity: activity\n      })\n  }\n  return data\n}\n\n/**\n *\n * @param {string} activity\n */\nexport const getEventFromActivity = activity =>\n  `${activityKey[activity.slice(0, activity.indexOf('-'))]} Round ${\n    activity[activity.indexOf('-') + 2]\n  } `\n/**\n *\n * @param {string} activity\n */\nexport const getGroupFromActivity = activity =>\n  `Group ${activity.slice(activity.lastIndexOf('-') + 2)}`\n\nexport const activityKey = {\n  '222': '2x2',\n  '333': '3x3',\n  '444': '4x4',\n  '555': '5x5',\n  '666': '6x6',\n  '777': '7x7',\n  pyram: 'Pyraminx',\n  '333oh': '3x3 One Handed',\n  '3bld': '3x3 Blindfolded',\n  '4bld': '4x4 Blindfolded',\n  skewb: 'Skewb',\n  clock: 'Clock',\n  '333ft': '3x3 with Feet',\n  '333mbf': '3x3 Multiple Blindfolded',\n  '333fm': 'Fewest Moves',\n  sq1: 'Square 1',\n  minx: 'Megaminx'\n}\n\nexport const getActivityIdFromCode = (activityCode, activities) => {\n  const activity = activities.find(\n    activity => activity.activityCode === activityCode\n  )\n  return activity\n}\n\nexport const getAssignmentsFromActivityId = (activityCode, wcif) => {\n  let compete = []\n  let staff = []\n  const persons = wcif.persons\n  for (const person of persons) {\n    for (const asssignment of person.assignments) {\n      if (asssignment.activityId === activityCode) {\n        asssignment.assignmentCode === 'competitor'\n          ? compete.push(person)\n          : staff.push(person)\n      }\n    }\n  }\n  return [compete, staff]\n}\n\nexport const getPersonalBestFromActivity = (competitor, activityCode) => {\n  const event = activityCode.slice(0, activityCode.indexOf('-'))\n  const activityEvent = competitor.personalBests.find(e => e.eventId === event)\n  return activityEvent ? getPreciseTime(activityEvent.best) : ''\n}\n\nexport const getDelays = schedule => {\n  let delays = []\n  for (const venue of schedule.venues) {\n    for (const room of venue.rooms) {\n      delays[room.id] = parseInt(getExtensionData('ScheduleConfig', room).delay)\n    }\n  }\n  return delays\n}\n","import React from 'react'\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport ErrorIcon from '@material-ui/icons/Error'\n\nexport default function Error({ message }) {\n  const useStyles = makeStyles(theme =>\n    createStyles({\n      root: {\n        width: '100%',\n        height: '100%',\n        textAlign: 'center',\n        color:\n          theme.palette.type === 'light'\n            ? theme.palette.error.dark\n            : theme.palette.error.light\n      },\n      error: {\n        fontSize: '50px'\n      }\n    })\n  )\n  const classes = useStyles()\n  return (\n    <Container>\n      <div className={classes.root}>\n        <ErrorIcon className={classes.error} />\n        <Typography variant='h1'>ERROR</Typography>\n        <Typography variant='subtitle1'>{message}</Typography>\n      </div>\n    </Container>\n  )\n}\n","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport 'moment-timezone'\nimport {\n  getMyAssignmentsInOrder,\n  getScheduleData,\n  flattenActivities,\n  assignedTo,\n  getEventFromActivity,\n  getGroupFromActivity,\n  getDelays\n} from '../Overview/OverviewLogic'\n\nimport Table from '@material-ui/core/Table'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/styles'\nimport {\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  Grid\n} from '@material-ui/core'\n\nimport InfoIcon from '@material-ui/icons/Info'\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord'\nimport DoneAllIcon from '@material-ui/icons/DoneAll'\n\nimport Error from '../../common/Error'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3)\n  },\n  paper: {\n    width: '100%',\n    padding: theme.spacing(2),\n    marginBottom: theme.spacing(3)\n  },\n  text: {\n    margin: theme.spacing(3)\n  },\n  table: {\n    overflowX: 'auto'\n  },\n  link: {\n    color: theme.palette.primary.light,\n    textDecoration: 'none'\n  }\n}))\nexport default function GroupsUser({ WCAID, match, userInfo, wcif }) {\n  console.log(userInfo)\n  // TODO: FIX ON MOBILE\n  const wcaId = match ? match.params.wcaId : WCAID ? WCAID : null\n  const myAssignments = getMyAssignmentsInOrder(wcaId, wcif)\n  const user = wcif.persons.find(\n    person => person.wcaId === wcaId || person.wcaUserId === parseInt(wcaId)\n  )\n  const mySchedule =\n    myAssignments &&\n    getScheduleData([], [], [], myAssignments, flattenActivities(wcif.schedule))\n  const classes = useStyles()\n  const roomDelays = getDelays(wcif.schedule)\n  return (\n    <>\n      {myAssignments === null ? (\n        <Error message={'Invalid ID'} />\n      ) : (\n        <Grid item className={classes.root} xs={12}>\n          <Typography\n            className={classes.text}\n            align='center'\n            variant='h3'\n            component='h1'\n          >\n            {user.name}\n          </Typography>\n          <Typography\n            className={classes.text}\n            align='center'\n            variant='h4'\n            component='h1'\n          >\n            {user.wcaId}\n          </Typography>\n          <Paper className={classes.paper}>\n            {wcif.schedule.venues.map(venue =>\n              venue.rooms.map(room => {\n                if (roomDelays[room.id] > 0)\n                  return (\n                    <Grid\n                      container\n                      spacing={2}\n                      key={room.id}\n                      alignItems='center'\n                    >\n                      <Grid item>\n                        <InfoIcon\n                          style={{ color: room.color }}\n                          fontSize='large'\n                        />\n                      </Grid>\n                      <Grid item>\n                        <Typography>\n                          {`${room.name} is currently delayed by ${\n                            roomDelays[room.id]\n                          } minute(s).`}\n                        </Typography>\n                      </Grid>\n                    </Grid>\n                  )\n                else return <React.Fragment key={room.id}></React.Fragment>\n              })\n            )}\n            {roomDelays.filter(delay => delay !== 0).length === 0 && (\n              <Grid container spacing={2} alignItems='center'>\n                <Grid item>\n                  <DoneAllIcon style={{ color: '#00ff00' }} fontSize='large' />\n                </Grid>\n                <Grid item>\n                  <Typography>\n                    {`${wcif.name} is running on schedule!`}\n                  </Typography>\n                </Grid>\n              </Grid>\n            )}\n          </Paper>\n          <Paper className={classes.paper}>\n            <Table className={classes.table}>\n              <TableHead>\n                <TableRow>\n                  <TableCell size='small'>\n                    <Typography>{`Time`} </Typography>\n                  </TableCell>\n                  <TableCell>\n                    <Typography>{`Event`} </Typography>\n                  </TableCell>\n                  <TableCell size='small'>\n                    <Typography>{`Group`} </Typography>\n                  </TableCell>\n                  <TableCell size='small'>\n                    <Typography>{`Activity`} </Typography>\n                  </TableCell>\n                  <TableCell>\n                    <Typography>{`Room`} </Typography>\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {mySchedule &&\n                  mySchedule.map(assignment => (\n                    <TableRow key={assignment.title}>\n                      <TableCell>\n                        <Typography>\n                          {moment(assignment.startDate)\n                            .tz(wcif.schedule.venues[0].timezone)\n                            .format('hh:mm a')}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Typography>\n                          {getEventFromActivity(\n                            assignment.activity.activityCode\n                          )}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Link\n                          className={classes.link}\n                          to={`/competitions/${wcif.id}/groups/${assignment.activity.room.id}/${assignment.activity.activityCode}`}\n                        >\n                          <Typography>\n                            {getGroupFromActivity(\n                              assignment.activity.activityCode\n                            )}\n                          </Typography>\n                        </Link>\n                      </TableCell>\n                      <TableCell>\n                        <Typography>\n                          {assignedTo(assignment.assignmentCode)}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Grid container alignItems='center'>\n                          <Grid item>\n                            <Typography>\n                              {assignment.activity.room.name}\n                            </Typography>\n                          </Grid>\n                          <Grid item>\n                            <FiberManualRecordIcon\n                              style={{\n                                fontSize: '50px',\n                                color: assignment.activity.room.color\n                              }}\n                            />\n                          </Grid>\n                        </Grid>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n              </TableBody>\n            </Table>\n          </Paper>\n        </Grid>\n      )}\n    </>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport {\n  getActivityIdFromCode,\n  getAssignmentsFromActivityId,\n  flattenActivities,\n  getPersonalBestFromActivity,\n  assignedTo\n} from '../Overview/OverviewLogic'\n\nimport {\n  LinearProgress,\n  Typography,\n  TableHead,\n  TableRow,\n  Table,\n  TableCell,\n  TableBody,\n  Grid,\n  makeStyles,\n  Tooltip,\n  IconButton\n} from '@material-ui/core'\n\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord'\n\nimport Error from '../../common/Error'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    margin: theme.spacing(3)\n  },\n  link: {\n    textDecoration: 'none',\n    color: theme.palette.primary.light\n  },\n  top: {\n    margin: 'auto',\n    backgroundColor: theme.palette.primary.main\n  },\n  header: {\n    backgroundColor: theme.palette.secondary.main\n  },\n  text: {\n    margin: theme.spacing(3)\n  },\n  table: {\n    margin: 'auto',\n\n    maxWidth: 800\n  }\n}))\n\nexport default function GroupsActivity({ match, userInfo, wcif }) {\n  const { activityCode } = match.params\n  const activity = getActivityIdFromCode(\n    activityCode,\n    flattenActivities(wcif.schedule)\n  )\n  const [loading, setLoading] = useState(true)\n  const [groupInfo, setGroupInfo] = useState([])\n  useEffect(() => {\n    setGroupInfo(\n      getAssignmentsFromActivityId(\n        getActivityIdFromCode(activityCode, flattenActivities(wcif.schedule))\n          .id,\n        wcif\n      )\n    )\n    setLoading(false)\n  }, [activityCode, wcif])\n  const classes = useStyles()\n  return (\n    <>\n      {loading && <LinearProgress />}\n      {!loading && groupInfo[0] && (\n        <div className={classes.root}>\n          <Grid container spacing={2} alignItems='center' justify='center'>\n            <Grid item>\n              <Tooltip\n                disableFocusListener\n                disableTouchListener\n                placement='top'\n                title={`${activity.room.name}`}\n              >\n                <IconButton>\n                  <FiberManualRecordIcon\n                    style={{ color: activity.room.color, fontSize: '60px' }}\n                  />\n                </IconButton>\n              </Tooltip>\n            </Grid>\n            <Grid item>\n              <Typography\n                className={classes.text}\n                align='center'\n                variant='h4'\n                component='h1'\n              >\n                {activity.name}\n              </Typography>\n            </Grid>\n          </Grid>\n          <Table size='small' className={classes.table}>\n            <TableHead>\n              <TableRow>\n                <TableCell className={classes.top} align='center' colSpan={5}>\n                  <Typography> Competitors </Typography>\n                </TableCell>\n              </TableRow>\n              <TableRow className={classes.header}>\n                <TableCell>\n                  <Typography>Competitor</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography>WCA ID</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography>Seed Time</Typography>\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {groupInfo[0].map(competitor => (\n                <TableRow key={competitor.wcaUserId}>\n                  <TableCell>\n                    <Link\n                      className={classes.link}\n                      to={`/competitions/${wcif.id}/groups/${\n                        competitor.wcaId\n                          ? competitor.wcaId\n                          : competitor.wcaUserId\n                      }`}\n                    >\n                      <Typography> {competitor.name}</Typography>\n                    </Link>\n                  </TableCell>\n                  <TableCell>\n                    <Typography>{competitor.wcaId}</Typography>\n                  </TableCell>\n                  <TableCell>\n                    <Typography>\n                      {getPersonalBestFromActivity(\n                        competitor,\n                        activity.activityCode\n                      )}\n                    </Typography>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n            <TableHead>\n              <TableRow>\n                <TableCell className={classes.top} align='center' colSpan={5}>\n                  <Typography> Staff </Typography>\n                </TableCell>\n              </TableRow>\n              <TableRow className={classes.header}>\n                <TableCell>\n                  <Typography> Competitor </Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography> WCA ID </Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography> Duty </Typography>\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {groupInfo[1].map(competitor => (\n                <TableRow key={competitor.wcaUserId}>\n                  <TableCell>\n                    {console.log(competitor)}\n                    <Link\n                      className={classes.link}\n                      to={`/competitions/${wcif.id}/groups/${\n                        competitor.wcaId\n                          ? competitor.wcaId\n                          : competitor.wcaUserId\n                      }`}\n                    >\n                      <Typography>{competitor.name}</Typography>\n                    </Link>\n                  </TableCell>\n                  <TableCell>\n                    <Typography>{competitor.wcaId}</Typography>\n                  </TableCell>\n                  <TableCell>\n                    <Typography>\n                      {assignedTo(\n                        competitor.assignments.find(\n                          assignment => assignment.activityId === activity.id\n                        ).assignmentCode\n                      )}\n                    </Typography>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      )}\n    </>\n  )\n}\n","import React, { useState } from 'react'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport GroupsUser from './GroupsUser'\nimport TextField from '@material-ui/core/TextField'\nimport { Grid } from '@material-ui/core'\n\nexport default function GroupsGeneral({ wcif }) {\n  const persons = wcif.persons\n  const [person, setPerson] = useState(persons[0])\n  const handleChange = (event, values) => {\n    setPerson(values)\n  }\n  return (\n    <Grid container direction='column' alignItems='center'>\n      <Grid item>\n        <Autocomplete\n          onChange={handleChange}\n          options={persons}\n          getOptionLabel={person =>\n            `${person.name} ${person.wcaId ? `- ${person.wcaId}` : ''}`\n          }\n          style={{ width: 300 }}\n          value={person}\n          renderInput={params => (\n            <TextField\n              {...params}\n              label='Competitor'\n              variant='outlined'\n              fullWidth\n            />\n          )}\n        />\n      </Grid>\n      <Grid item>\n        <GroupsUser\n          WCAID={person.wcaId ? person.wcaId : person.wcaUserId}\n          userInfo={person}\n          wcif={wcif}\n        />\n      </Grid>\n    </Grid>\n  )\n}\n","import React from 'react'\nimport { Route, Redirect, Switch } from 'react-router-dom'\nimport GroupsUser from './GroupsUser'\nimport GroupsActivity from './GroupsActivity'\nimport GroupsGeneral from './GroupsGeneral'\n\nexport default function Groups({ user, wcif, userInfo }) {\n  console.log(userInfo)\n  return (\n    <Switch>\n      <Route\n        path={`/competitions/${wcif.id}/groups/:roomId/:activityCode`}\n        render={props => (\n          <GroupsActivity {...props} wcif={wcif} userInfo={userInfo} />\n        )}\n      />\n      <Route\n        path={`/competitions/${wcif.id}/groups/general`}\n        render={props => <GroupsGeneral {...props} wcif={wcif} />}\n      />\n      <Route\n        path={`/competitions/${wcif.id}/Groups/:wcaId`}\n        render={props => (\n          <GroupsUser {...props} wcif={wcif} userInfo={userInfo} />\n        )}\n      />\n      {user !== 'spectator' && (\n        <Redirect\n          to={`/competitions/${wcif.id}/Groups/${\n            userInfo.me.wca_id ? userInfo.me.wca_id : userInfo.me.id\n          }`}\n        />\n      )}\n      {user === 'spectator' && (\n        <Redirect to={`/competitions/${wcif.id}/Groups/general`} />\n      )}\n    </Switch>\n  )\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport { Grid, IconButton } from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  icon: {\n    fontSize: 20,\n    padding: theme.spacing(1),\n    '&:hover': {\n      opacity: 0.7,\n      color: theme.palette.primary.main\n    }\n  },\n  iconSelect: {\n    fontSize: 20,\n    padding: theme.spacing(1),\n    color: theme.palette.primary.main,\n    '&:hover': {\n      opacity: 0.7\n    }\n  }\n}))\n\nexport default function EventList({\n  selected = [],\n  onClick,\n  justify,\n  events,\n  alignment = 'row',\n  size = 2,\n  user = 'spectator',\n  userInfo\n}) {\n  const classes = useStyles()\n  return (\n    <div className={classes.root}>\n      <Grid container direction={alignment} justify={justify}>\n        {events.map(event => (\n          <Grid item key={event}>\n            <IconButton variant='inherit' onClick={() => onClick(event)}>\n              <span\n                className={\n                  (!selected.includes(event)\n                    ? classes.iconSelect\n                    : classes.icon) + ` cubing-icon event-${event}`\n                }\n              />\n            </IconButton>\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  )\n}\n","import React from 'react'\nimport Chip from '@material-ui/core/Chip'\nimport Grid from '@material-ui/core/Grid'\nimport { assignedTo } from './OverviewLogic'\n\nexport default function OverviewFilterChips({\n  venues,\n  unselectedRooms,\n  setUnselectedRooms,\n  unselectedAssignments,\n  setUnselectedAssignments\n}) {\n  const duties = [\n    'competitor',\n    'staff-judge',\n    'staff-runner',\n    'staff-scrambler'\n  ]\n  const updateSelectedRooms = roomId => {\n    unselectedRooms.includes(roomId)\n      ? setUnselectedRooms(unselectedRooms.filter(room => room !== roomId))\n      : setUnselectedRooms([...unselectedRooms, roomId])\n  }\n  const updateSelectedAssignments = name => {\n    unselectedAssignments.includes(name)\n      ? setUnselectedAssignments(\n          unselectedAssignments.filter(assignment => assignment !== name)\n        )\n      : setUnselectedAssignments([...unselectedAssignments, name])\n  }\n  return (\n    <Grid container direction='column' spacing={2}>\n      <Grid item>\n        {venues.map(venue =>\n          venue.rooms.map(room => (\n            <Chip\n              clickable\n              onClick={() => updateSelectedRooms(room.id)}\n              key={room.id}\n              label={room.name}\n              style={\n                unselectedRooms.includes(room.id)\n                  ? {}\n                  : { backgroundColor: room.color }\n              }\n            />\n          ))\n        )}\n      </Grid>\n      <Grid item>\n        {duties.map(duty => (\n          <Chip\n            clickable\n            onClick={() => updateSelectedAssignments(duty)}\n            key={duty}\n            label={assignedTo(duty)}\n            color={unselectedAssignments.includes(duty) ? 'default' : 'primary'}\n          />\n        ))}\n      </Grid>\n    </Grid>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport EventList from '../../common/EventList'\nimport { makeStyles, Paper } from '@material-ui/core'\nimport { ViewState } from '@devexpress/dx-react-scheduler'\nimport {\n  Scheduler,\n  DayView,\n  Appointments\n} from '@devexpress/dx-react-scheduler-material-ui'\nimport { getScheduleData, flattenActivities } from './OverviewLogic'\nimport OverviewFilterChips from './OverviewFilterChips'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    padding: theme.spacing(2, 3)\n  },\n  paper: {\n    margin: theme.spacing(2),\n    padding: theme.spacing(3),\n    textAlign: 'center'\n  },\n  card: {\n    textAlign: 'center',\n    margin: theme.spacing(2),\n    maxHeight: '200px'\n  }\n}))\nconst Appointment = props => {\n  return (\n    <Appointments.Appointment\n      {...props}\n      style={{ backgroundColor: props.data.activity.room.color }}\n    />\n  )\n}\n\nexport default function Overview({\n  myEvents,\n  myAssignments,\n  wcif,\n  user,\n  userInfo\n}) {\n  const classes = useStyles()\n  const [selectedEvents, setSelectedEvents] = useState([])\n  const [unselectedRooms, setUnselectedRooms] = useState([])\n  const [unselectedAssignments, setUnselectedAssignments] = useState([])\n  const [data, setData] = useState([])\n  useEffect(() => {\n    setData(\n      getScheduleData(\n        selectedEvents,\n        unselectedRooms,\n        unselectedAssignments,\n        myAssignments,\n        flattenActivities(wcif.schedule)\n      )\n    )\n  }, [\n    selectedEvents,\n    unselectedRooms,\n    unselectedAssignments,\n    myAssignments,\n    wcif\n  ])\n  const addSelectedEvent = eventId => {\n    selectedEvents.includes(eventId)\n      ? setSelectedEvents(selectedEvents.filter(event => !(event === eventId)))\n      : setSelectedEvents([...selectedEvents, eventId])\n  }\n  const changeFilter = () => {}\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EventList\n          selected={selectedEvents}\n          onClick={addSelectedEvent}\n          justify='center'\n          events={myEvents}\n          user={user}\n          userInfo={userInfo}\n        />\n        <OverviewFilterChips\n          venues={wcif.schedule.venues}\n          unselectedRooms={unselectedRooms}\n          setUnselectedRooms={setUnselectedRooms}\n          unselectedAssignments={unselectedAssignments}\n          setUnselectedAssignments={setUnselectedAssignments}\n          changeFilter={changeFilter}\n        />\n        <Scheduler data={data}>\n          <ViewState currentDate={wcif.schedule.startDate} />\n          <DayView startDayHour={8} endDayHour={19} cellDuration={30} />\n          <Appointments appointmentComponent={Appointment} />\n        </Scheduler>\n      </Paper>\n    </div>\n  )\n}\n","import React, {useState} from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Divider from '@material-ui/core/Divider'\nimport Typography from '@material-ui/core/Typography'\nimport { getExtensionData, setExtensionData } from '../../../server/wcif'\nimport { setIn } from '../../../server/tools'\n\nexport default function ProjectorRoomAdmin({room,onRoomChange}) {\n    const onValueChange = (name) => (event) => {\n        onRoomChange(\n            setExtensionData(\n                'ScheduleConfig',\n                room,\n                setIn(getExtensionData('ScheduleConfig',room),[name],event.target.value)\n            ))\n    }\n    const localConfig = getExtensionData('ScheduleConfig',room)\n    return (\n    <>\n        <Typography variant='h6'>{room.name}</Typography>\n        <TextField\n            id=\"outlined-number\"\n            label=\"Delay (minutes)\"\n            type=\"number\"\n            InputLabelProps={{\n                shrink: true,\n            }}\n            value={localConfig.delay}\n            onChange={onValueChange('delay')}\n            margin=\"normal\"\n            variant=\"outlined\"\n        />\n        <TextField\n            id=\"outlined-multiline-static\"\n            label=\"Pinned Messsage\"\n            type=\"text\"\n            InputLabelProps={{\n                shrink: true,\n            }}\n            multiline\n            rows='4'\n            value={localConfig.pinnedMessage}\n            onChange={onValueChange('pinnedMessage')}\n            margin=\"normal\"\n            variant=\"outlined\"\n            helperText=\"Use this if you would like to project a message at the competition. You might want to include WiFi details, lunch details among other stuff. Come back if you wish to add anything.\"\n        />\n        <Divider/>\n    </>\n    )\n}\n","import React, { useState } from 'react'\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions'\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails'\nimport Button from '@material-ui/core/Button'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport TextField from '@material-ui/core/TextField'\nimport { getRoomColors } from '../../../server/wcif'\nimport { Typography } from '@material-ui/core'\nimport Divider from '@material-ui/core/Divider'\nimport { makeStyles } from '@material-ui/core/styles'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\nimport { mapIn } from '../../../server/tools'\nimport ProjectorRoomAdmin from './ProjectorRoomAdmin'\n/*\nTODO: Implement A COLOR PICKER for rooms\n*/\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  },\n  title: {\n    margin: theme.spacing(3),\n    textAlign: 'center'\n  },\n  group: {\n    justifyContent: 'center'\n  },\n  link: {\n    justifyContent: 'center',\n    maxWidth: 200\n  }\n}))\n\nexport default function ProjectorAdmin({\n  wcif,\n  setWcif,\n  updateProjectorConfig,\n  venues,\n  id\n}) {\n  const projectorConfigUpdate = newRoom => {\n    console.log(newRoom)\n    setWcif(\n      mapIn(wcif, ['schedule', 'venues'], venue =>\n        mapIn(venue, ['rooms'], room =>\n          room.id === newRoom.id ? newRoom : room\n        )\n      )\n    )\n  }\n  const saveWcif = () => {\n    updateProjectorConfig()\n  }\n  const classes = useStyles()\n  return (\n    <>\n      <ExpansionPanelDetails>\n        <FormGroup>\n          {venues.map(venue =>\n            venue.rooms.map(room => (\n              <ProjectorRoomAdmin\n                key={room.id}\n                room={room}\n                onRoomChange={projectorConfigUpdate}\n              />\n            ))\n          )}\n          <Typography className={classes.title} variant='h6' gutterBottom>\n            Link to Projector Screens\n          </Typography>\n          <ButtonGroup className={classes.group}>\n            <Button\n              className={classes.link}\n              variant='outlined'\n              href={`/project/${id}/all`}\n            >\n              Slideshow\n            </Button>\n            <Button\n              className={classes.link}\n              variant='outlined'\n              href={`/project/${id}/pin`}\n            >\n              Pinned Messages\n            </Button>\n            {venues.map(venue =>\n              venue.rooms.map(room => (\n                <Button\n                  className={classes.link}\n                  key={room.id}\n                  variant='outlined'\n                  href={`/project/${room.id}`}\n                >\n                  {room.name}\n                </Button>\n              ))\n            )}\n          </ButtonGroup>\n        </FormGroup>\n      </ExpansionPanelDetails>\n      <ExpansionPanelActions>\n        <Button size='small' color='primary' onClick={() => saveWcif()}>\n          Save\n        </Button>\n      </ExpansionPanelActions>\n    </>\n  )\n}\n","import React, {useState, useEffect} from 'react'\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions'\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails'\nimport Button from '@material-ui/core/Button'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormControl from '@material-ui/core/FormControlLabel'\nimport Switch from '@material-ui/core/Switch'\nimport NativeSelect from '@material-ui/core/NativeSelect'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport { setExtensionData, getExtensionData } from '../../../server/wcif'\nimport {setIn} from '../../../server/tools'\n\nexport default function GeneralAdmin({wcif,setWcif,updateGeneralConfig}) {\n    const localConfig = getExtensionData('GeneralConfig',wcif)\n    const onValueChange = (name) => (event) => {\n        setWcif(\n            setExtensionData(\n                'GeneralConfig',\n                wcif,\n                setIn(getExtensionData('GeneralConfig',wcif),[name],event.target.value)\n            )\n        )\n    }\n    const onCheckboxChange = (name) => (event) => {\n        setWcif(\n            setExtensionData(\n                'GeneralConfig',\n                wcif,\n                setIn(getExtensionData('GeneralConfig',wcif),[name],event.target.checked)\n            )\n        )\n        console.log(wcif)\n        console.log(getExtensionData('GeneralConfig',wcif))\n    }\n    const saveWcif = () => {\n        updateGeneralConfig()\n    }\n    return (\n    <>\n        <ExpansionPanelDetails>\n            <FormGroup>\n                <FormControlLabel\n                    control={\n                        <Switch\n                        checked={localConfig.useProjector}\n                        value='useProjector'\n                        onChange={onCheckboxChange('useProjector')}\n                        />\n                    }\n                    label='Use Projector'\n                />\n                <FormControlLabel\n                    control={\n                        <Switch\n                        checked={localConfig.useTelegramNotif}\n                        value='useTelegramNotif'\n                        onChange={onCheckboxChange('useTelegramNotif')}\n                        />\n                    }\n                    label='Use Telegram Notifications'\n                />\n                <FormControlLabel\n                    control={\n                        <Switch\n                        checked={localConfig.showGroups}\n                        value='useGroups'\n                        onChange={onCheckboxChange('useGroups')}\n                        />\n                    }\n                    label='Show Groups & Assignments'\n                />\n                {\n                <FormControl\n                    required\n                    style={{\n                        margin:20,\n                        minWidth: 120,\n                    }}\n                    control={\n                        <div>\n                            <InputLabel htmlFor='group-tool-helper'>Group Tool Used</InputLabel>\n                            <NativeSelect\n                            value={localConfig.groupTool}\n                            onChange={onValueChange('groupTool')}\n                            >\n                            <option value=''>None</option>\n                            <option value='groupifier'>Groupifier</option>\n                            </NativeSelect>\n                            <FormHelperText>Select the tool you used to generate groups. Only programs that communicate with WCIF are usable. If not selected, competitors will be unable to view their groups and you will have to manually proceed groups on the projector.</FormHelperText>\n                        </div>\n                    }\n                />}     \n            </FormGroup>\n        </ExpansionPanelDetails>\n        <ExpansionPanelActions>\n            <Button size=\"small\" color=\"primary\" onClick={()=>saveWcif()}>Save</Button>\n        </ExpansionPanelActions>\n    </>\n    )\n}\n","import React from 'react'\n\nexport default function NotificationsAdmin() {\n    return (\n        <div>\n            \n        </div>\n    )\n}\n","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel'\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary'\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails'\nimport Typography from '@material-ui/core/Typography'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport ProjectorAdmin from './ProjectorAdmin'\nimport GeneralAdmin from './GeneralAdmin'\nimport NotificationsAdmin from './NotificationsAdmin'\nimport Error from '../../common/Error'\nimport { getExtensionData } from '../../../server/wcif'\nimport { saveWcifChanges } from '../../../server/wca-api'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular\n  },\n  mainLoader: {\n    position: 'absolute',\n    left: '55%',\n    top: '50%'\n  }\n}))\n\nexport default function Admin({ user, wcif, setWcif }) {\n  const classes = useStyles()\n  const [localWcif, setLocalWcif] = useState(wcif)\n  const [loading, setLoading] = useState(false)\n  const onWcifUpdate = () => {\n    setLoading(true)\n    console.log(localWcif)\n    saveWcifChanges(wcif, localWcif)\n      .then(() => {\n        setWcif(localWcif)\n        setLoading(false)\n      })\n      .catch(err => <Error message={err} />)\n  }\n  return (\n    <div className={classes.root}>\n      {loading && <CircularProgress size={50} className={classes.mainLoader} />}\n      {!loading && user === 'admin' && (\n        <>\n          <ExpansionPanel>\n            <ExpansionPanelSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls='panel1a-content'\n              id='panel1a-header'\n            >\n              <Typography className={classes.heading}>General</Typography>\n            </ExpansionPanelSummary>\n            <GeneralAdmin\n              wcif={localWcif}\n              setWcif={setLocalWcif}\n              updateGeneralConfig={onWcifUpdate}\n            />\n          </ExpansionPanel>\n          <ExpansionPanel\n            disabled={!getExtensionData('GeneralConfig', wcif).useProjector}\n          >\n            <ExpansionPanelSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls='panel2a-content'\n              id='panel2a-header'\n            >\n              <Typography className={classes.heading}>Projector</Typography>\n            </ExpansionPanelSummary>\n            <ProjectorAdmin\n              wcif={localWcif}\n              setWcif={setLocalWcif}\n              updateProjectorConfig={onWcifUpdate}\n              venues={localWcif.schedule.venues}\n              id={localWcif.id}\n            />\n          </ExpansionPanel>\n          <ExpansionPanel\n            disabled={!getExtensionData('GeneralConfig', wcif).useTelegramNotif}\n          >\n            <ExpansionPanelSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls='panel3a-content'\n              id='panel3a-header'\n            >\n              <Typography className={classes.heading}>\n                {' '}\n                Notifications\n              </Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n              <NotificationsAdmin\n                wcif={localWcif}\n                setWcif={setLocalWcif}\n                updateNotificationsConfig={onWcifUpdate}\n              />\n            </ExpansionPanelDetails>\n          </ExpansionPanel>\n        </>\n      )}\n      {user !== 'admin' && <Error message={'You are not an administrator'} />}\n    </div>\n  )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport Button from '@material-ui/core/Button'\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle'\nimport ErrorIcon from '@material-ui/icons/Error'\nimport InfoIcon from '@material-ui/icons/Info'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { amber, green } from '@material-ui/core/colors'\nimport IconButton from '@material-ui/core/IconButton'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport SnackbarContent from '@material-ui/core/SnackbarContent'\nimport WarningIcon from '@material-ui/icons/Warning'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n}\n\nconst useStyles1 = makeStyles(theme => ({\n  success: {\n    backgroundColor: green[600]\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark\n  },\n  info: {\n    backgroundColor: theme.palette.primary.main\n  },\n  warning: {\n    backgroundColor: amber[700]\n  },\n  icon: {\n    fontSize: 20\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing(1)\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center'\n  }\n}))\n\nfunction MySnackbarContentWrapper(props) {\n  const classes = useStyles1()\n  const { className, message, onClose, variant, ...other } = props\n  const Icon = variantIcon[variant]\n\n  return (\n    <SnackbarContent\n      className={clsx(classes[variant], className)}\n      aria-describedby='client-snackbar'\n      message={\n        <span id='client-snackbar' className={classes.message}>\n          <Icon className={clsx(classes.icon, classes.iconVariant)} />\n          {message}\n        </span>\n      }\n      action={[\n        <IconButton\n          key='close'\n          aria-label='close'\n          color='inherit'\n          onClick={onClose}\n        >\n          <CloseIcon className={classes.icon} />\n        </IconButton>\n      ]}\n      {...other}\n    />\n  )\n}\n\nMySnackbarContentWrapper.propTypes = {\n  className: PropTypes.string,\n  message: PropTypes.string,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired\n}\n\nconst useStyles2 = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1)\n  }\n}))\n\nexport default function MySnackbar({ variant, message }) {\n  const classes = useStyles2()\n  const [open, setOpen] = React.useState(true)\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return\n    }\n\n    setOpen(false)\n  }\n\n  return (\n    <div>\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left'\n        }}\n        open={open}\n        autoHideDuration={6000}\n        onClose={handleClose}\n      >\n        <MySnackbarContentWrapper\n          onClose={handleClose}\n          variant={variant}\n          message={message}\n        />\n      </Snackbar>\n    </div>\n  )\n}\n","import React, { Component } from 'react'\nimport { Redirect, Route } from 'react-router-dom'\nimport Notifications from './Notifications/Notifications'\nimport Groups from './Groups/Groups'\nimport Projector from './Projector/Projector'\nimport Overview from './Overview/Overview'\nimport Error from '../common/Error'\nimport Admin from './Admin/Admin'\n\nimport LinearProgress from '@material-ui/core/LinearProgress'\n\nimport { getWcif, getWcifPublic } from '../../server/wca-api'\nimport { isExtensionSetup } from '../../server/wcif'\nimport {\n  getMyAssignmentsInOrder,\n  getMyEventsInOrder\n} from './Overview/OverviewLogic'\nimport MySnackbar from '../common/MySnackbar'\n\nclass Competition extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      wcif: null,\n      loadingWcif: true,\n      myEvents: [],\n      extensionSetup: false\n    }\n    props.user === 'admin'\n      ? getWcif(this.props.compId).then(res =>\n          this.setState({ wcif: res, loadingWcif: false })\n        )\n      : getWcifPublic(this.props.compId).then(res =>\n          this.setState({ wcif: res, loadingWcif: false })\n        )\n    if (props.user !== 'spectator' && !this.state.loadingWcif) {\n      this.setState({\n        myEvents: getMyEventsInOrder(props.userInfo, this.state.wcif),\n        extensionSetup: isExtensionSetup('GeneralConfig', this.state.wcif)\n      })\n    }\n  }\n  setWcif = newWcif => this.setState({ wcif: newWcif })\n  render() {\n    const { wcif, loadingWcif } = this.state\n    const { user, userInfo, compId } = this.props\n    return (\n      <div>\n        {!loadingWcif && isExtensionSetup('GeneralConfig', wcif) && (\n          <>\n            <Route\n              path={`/competitions/${wcif.id}/overview`}\n              render={props => (\n                <Overview\n                  {...props}\n                  myEvents={getMyEventsInOrder(userInfo, wcif)}\n                  myAssignments={getMyAssignmentsInOrder(\n                    userInfo.me.wca_id,\n                    wcif\n                  )}\n                  wcif={wcif}\n                  user={user}\n                  userInfo={userInfo}\n                />\n              )}\n            />\n            <Route\n              path={`/competitions/${wcif.id}/groups`}\n              render={props => (\n                <Groups\n                  {...props}\n                  user={user}\n                  wcif={wcif}\n                  userInfo={userInfo}\n                />\n              )}\n            />\n            <Route\n              path={`/competitions/${wcif.id}/notifications`}\n              render={props => <Notifications {...props} />}\n            />\n            <Route\n              path={`/competitions/${wcif.id}/admin`}\n              render={props => (\n                <Admin\n                  {...props}\n                  user={user}\n                  wcif={this.state.wcif}\n                  setWcif={this.setWcif}\n                />\n              )}\n            />\n          </>\n        )}\n        {!loadingWcif &&\n          !isExtensionSetup('GeneralConfig', wcif) &&\n          (user === 'admin' ? (\n            <>\n              <Redirect to={`/competitions/${compId}/admin`} />\n              <MySnackbar\n                variant={'error'}\n                message={'Set up Admin information first'}\n              />\n              <Admin\n                user={user}\n                wcif={this.state.wcif}\n                setWcif={this.setWcif}\n              />\n            </>\n          ) : (\n            <Error message={'TODO MAKE A useError HOOK!'} />\n          ))}\n        {loadingWcif && <LinearProgress />}\n      </div>\n    )\n  }\n}\nexport default Competition\n","import React, { useState } from 'react'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Drawer from '@material-ui/core/Drawer'\nimport Hidden from '@material-ui/core/Hidden'\nimport { makeStyles } from '@material-ui/core/styles'\nimport DashboardList from './DashboardList'\nimport Competition from '../Competition'\n\nconst drawerWidth = 240\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex'\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0\n    }\n  },\n  appBar: {\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth\n    }\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none'\n    }\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3)\n  },\n  footerPadding: {\n    width: '100%',\n    height: 50\n  }\n}))\n\nfunction Dashboard({\n  match,\n  location,\n  history,\n  container,\n  mobileOpen,\n  setMobileOpen,\n  userInfo,\n  managableComps,\n  upcomingComps\n}) {\n  const classes = useStyles()\n  const onItemChange = text => {\n    if (text !== currentComponent) {\n      setCurrentComponent(text)\n      history.push(`/competitions/${match.params.compId}/${text}/`)\n    }\n  }\n  const [currentComponent, setCurrentComponent] = useState('overview')\n  const [user] = useState(\n    managableComps.filter(comp => comp.id === match.params.compId).length > 0\n      ? 'admin'\n      : upcomingComps.filter(comp => comp.id === match.params.compId).length > 0\n      ? 'competitor'\n      : 'spectator'\n  )\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <nav className={classes.drawer} aria-label='mailbox folders'>\n        <Hidden smUp implementation='css'>\n          <Drawer\n            container={container}\n            variant='temporary'\n            anchor={'left'}\n            open={mobileOpen}\n            onClose={setMobileOpen}\n            classes={{\n              paper: classes.drawerPaper\n            }}\n            ModalProps={{\n              keepMounted: true\n            }}\n          >\n            <div>\n              <div className={classes.toolbar} />\n              <DashboardList user={user} onClick={onItemChange} />\n            </div>\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation='css'>\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper\n            }}\n            variant='permanent'\n            open\n          >\n            <div>\n              <div className={classes.toolbar} />\n              <DashboardList user={user} onClick={onItemChange} />\n            </div>\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        {\n          <>\n            <Competition\n              history={history}\n              user={user}\n              compId={match.params.compId}\n              userInfo={userInfo}\n            />\n            <div className={classes.footerPadding} />\n          </>\n        }\n      </main>\n    </div>\n  )\n}\n\nexport default Dashboard\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListSubheader from '@material-ui/core/ListSubheader'\n// eslint-disable-next-line no-unused-vars\nimport Divider from '@material-ui/core/Divider'\nimport Typography from '@material-ui/core/Typography'\nimport Paper from '@material-ui/core/Paper'\nimport FlagIconFactory from 'react-flag-icon-css'\nimport { compDatesToString } from '../../server/tools'\nconst FlagIcon = FlagIconFactory(React, { useCssModules: false })\n\nexport default function CompList({ myUpcomingComps }) {\n  return (\n    <Paper>\n      <List subheader={<ListSubheader>Upcoming Competitions</ListSubheader>}>\n        {myUpcomingComps.map(comp => {\n          return (\n            <ListItem\n              alignItems='flex-start'\n              key={comp.id}\n              button\n              component={Link}\n              to={`/competitions/${comp.id}/overview`}\n            >\n              <ListItemIcon\n                children={\n                  <FlagIcon\n                    size={'2x'}\n                    code={comp.country_iso2.toLowerCase()}\n                  />\n                }\n              />\n              <ListItemText\n                key={comp.id + '-about'}\n                primary={comp.name}\n                secondary={\n                  <React.Fragment key={comp.id + '-fragment'}>\n                    <Typography\n                      key={comp.id + 'date'}\n                      component='span'\n                      variant='body2'\n                      color='textPrimary'\n                    >\n                      {compDatesToString(comp.start_date, comp.end_date)}\n                    </Typography>\n                  </React.Fragment>\n                }\n              />\n            </ListItem>\n          )\n        })}\n      </List>\n    </Paper>\n  )\n}\n","import React, { Component } from 'react'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport CompList from './CompList'\nimport { getMyManagableComps, getMyUpcomingComps } from '../../server/wca-api'\nimport { sortArrayByDate } from '../../server/tools'\n\nclass LandingSignedIn extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      allUpcomingComps: null,\n      myManagableComps: null,\n      loadingAll: true,\n      loadingMine: true,\n      myUpcomingComps: null\n    }\n    getMyUpcomingComps(this.props.userInfo.me.id).then(res => {\n      this.setState({\n        myUpcomingComps: sortArrayByDate(res.upcoming_competitions),\n        loadingAll: false\n      })\n    })\n    getMyManagableComps().then(comps =>\n      this.setState({\n        myManagableComps: sortArrayByDate(comps),\n        loadingMine: false\n      })\n    )\n  }\n\n  render() {\n    const {\n      myUpcomingComps,\n      myManagableComps,\n      loadingAll,\n      loadingMine\n    } = this.state\n    return (\n      <>\n        {!loadingAll && !loadingMine && (\n          <CompList\n            myUpcomingComps={myUpcomingComps}\n            myManagableComps={myManagableComps}\n          />\n        )}\n        {loadingMine && loadingAll && <LinearProgress />}\n      </>\n    )\n  }\n}\n\nexport default LandingSignedIn\n","import React, { Component } from 'react'\nimport { Typography, Box, makeStyles, Grid, Divider } from '@material-ui/core'\nimport FlipCameraAndroidIcon from '@material-ui/icons/FlipCameraAndroid'\n\nconst useStyles = makeStyles(theme => ({\n  box: {\n    borderRadius: '25px',\n    margin: 'auto',\n    height: '80vh',\n    maxWidth: '80%',\n    padding: theme.spacing(2)\n  },\n  icon: {\n    fontSize: '4vmax'\n  },\n  grid: {\n    padding: theme.spacing(3)\n  }\n}))\nexport default function WelcomeLanding() {\n  const classes = useStyles()\n  return (\n    <>\n      <Box className={classes.box} bgcolor='background.paper'>\n        <Grid\n          container\n          className={classes.grid}\n          direction='column'\n          alignItems='center'\n          spacing={1}\n        >\n          <Grid item>\n            <FlipCameraAndroidIcon className={classes.icon} />\n          </Grid>\n          <Grid item>\n            <Typography color='textPrimary' variant='h2'>{`myComp`}</Typography>\n          </Grid>\n          <Grid item>\n            <Typography color='textSecondary' variant='subtitle2'>\n              {`Live WCA Competition Feedback Software`}\n            </Typography>\n          </Grid>\n        </Grid>\n        <Divider />\n      </Box>\n    </>\n  )\n}\n","import moment from 'moment'\nimport { flattenActivities } from '../Competition/Overview/OverviewLogic'\n\nexport const getCurrentEvents = (activities, delays) => {\n  let currentEvents = []\n\n  for (const activity of activities) {\n    // const now = moment().subtract(delays[activity.room.id], 'minutes')\n    const now = moment('2019-11-23T14:15:00Z')\n    if (\n      activity.childActivities.length === 0 &&\n      now.isBetween(\n        moment(activity.startTime).add(delays[activity.room.id], 'minutes'),\n        moment(activity.endTime).add(delays[activity.room.id], 'minutes')\n      )\n    ) {\n      currentEvents.push(activity)\n    }\n  }\n  return currentEvents\n}\n","import React, { useState, useEffect } from 'react'\nimport { getExtensionData } from '../../../server/wcif'\nimport { getCurrentEvents } from '../ProjectorLogic'\nimport { flattenActivities } from '../../Competition/Overview/OverviewLogic'\nimport {\n  Typography,\n  Divider,\n  Grid,\n  makeStyles,\n  List,\n  ListItem,\n  ListItemText,\n  ListSubheader,\n  Paper\n} from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  },\n  title: {\n    fontSize: '6vh'\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper\n  },\n  list: {\n    backgroundColor: theme.palette.background.paper\n  }\n}))\n\nexport default function AgendaScreen({ wcif }) {\n  const [delays, setDelays] = useState([])\n  useEffect(() => {\n    const venues = wcif.schedule.venues\n    let delays = []\n    for (const venue of venues) {\n      for (const room of venue.rooms) {\n        delays.push(parseInt(getExtensionData('ScheduleConfig', room).delay))\n      }\n    }\n    setDelays(delays)\n  }, [wcif])\n  const [currentEvents, setCurrentEvents] = useState([])\n  useEffect(() => {\n    setCurrentEvents(getCurrentEvents(flattenActivities(wcif.schedule), delays))\n  }, [delays, wcif.schedule])\n  const classes = useStyles()\n  return (\n    <>\n      <Paper className={classes.paper} square elevation={24}>\n        <List\n          className={classes.list}\n          subheader={\n            <ListSubheader>\n              <Typography align='center' className={classes.title}>\n                Happening Now!\n              </Typography>\n            </ListSubheader>\n          }\n        >\n          {currentEvents &&\n            currentEvents.map(event => (\n              <>\n                <ListItem\n                  style={{ backgroundColor: event.room.color }}\n                  alignItems='center'\n                >\n                  <ListItemText primary={event.name} secondary='Jan 9, 2014' />\n                </ListItem>\n                <Divider />\n              </>\n            ))}\n        </List>\n      </Paper>\n    </>\n  )\n}\n","import React from 'react'\n\nexport default function GroupScreen() {\n  return <div></div>\n}\n","import React from 'react'\n\nexport default function InfoScreen() {\n  return <div></div>\n}\n","import React from 'react'\n\nexport default function ResultsScreen() {\n  return <div></div>\n}\n","import React from 'react'\n\nexport default function SpotlightScreen() {\n  return <div></div>\n}\n","import React, { useState, useEffect } from 'react'\nimport Dialog from '@material-ui/core/Dialog'\nimport Slide from '@material-ui/core/Slide'\nimport { getWcif } from '../../server/wca-api'\nimport Error from '../common/Error'\nimport {\n  LinearProgress,\n  makeStyles,\n  Tab,\n  Tabs,\n  Typography,\n  Grid\n} from '@material-ui/core'\n\nimport TodayIcon from '@material-ui/icons/Today'\nimport DirectionsWalkIcon from '@material-ui/icons/DirectionsWalk'\nimport InfoIcon from '@material-ui/icons/Info'\nimport EqualizerIcon from '@material-ui/icons/Equalizer'\nimport EmojiEventsIcon from '@material-ui/icons/EmojiEvents'\n\nimport AgendaScreen from './Screens/AgendaScreen'\nimport GroupScreen from './Screens/GroupScreen'\nimport InfoScreen from './Screens/InfoScreen'\nimport ResultsScreen from './Screens/ResultsScreen'\nimport SpotlightScreen from './Screens/SpotlightScreen'\n\nconst useStyles = makeStyles(theme => ({\n  logo: {\n    maxHeight: 150,\n    maxWidth: 100\n  },\n  section: {\n    height: '100%'\n  },\n  root: {\n    minWidth: '100%',\n    height: '15%'\n  },\n  name: {\n    fontSize: 'calc(16px + 5vh)'\n  },\n  icon: {\n    fontSize: '8vmin'\n  },\n  label: {\n    fontSize: '4vmin'\n  },\n  toolbar: theme.mixins.toolbar\n}))\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction='up' ref={ref} {...props} />\n})\n\nconst ICON = {\n  AGENDA: TodayIcon,\n  COMPETING: DirectionsWalkIcon,\n  INFO: InfoIcon,\n  SPOTLIGHT: EmojiEventsIcon,\n  RESULTS: EqualizerIcon\n}\n\nconst getIndex = (currentScreen, length) =>\n  currentScreen === length - 1 ? 0 : currentScreen + 1\nconst DURATION = screen => {\n  console.log(screen)\n  switch (screen) {\n    case 'AGENDA':\n      return 5000\n    case 'COMPETING':\n      return 6000\n    case 'INFO':\n      return 7000\n    case 'SPOTLIGHT':\n      return 7000\n    case 'RESULTS':\n      return 7000\n    case undefined:\n      return 2000\n    default:\n      return 5000\n  }\n}\n\nexport default function Projector({ match }) {\n  const [loading, setLoading] = useState(true)\n  const [wcif, setWcif] = useState(null)\n  const [error, setError] = useState(null)\n  const [screens] = useState([\n    'AGENDA',\n    'COMPETING',\n    'INFO',\n    'SPOTLIGHT',\n    'RESULTS'\n  ])\n  const [currentScreen, setCurrentScreen] = useState(-1)\n  const currentScreenRef = React.useRef(currentScreen)\n  currentScreenRef.current = currentScreen\n  const getScreenFromName = () => {\n    switch (screens[currentScreen]) {\n      case 'AGENDA':\n        return <AgendaScreen wcif={wcif} />\n      case 'COMPETING':\n        return <GroupScreen wcif={wcif} />\n      case 'INFO':\n        return <InfoScreen wcif={wcif} />\n      case 'SPOTLIGHT':\n        return <SpotlightScreen wcif={wcif} />\n      case 'RESULTS':\n        return <ResultsScreen wcif={wcif} />\n      default:\n        return <Error />\n    }\n  }\n\n  useEffect(() => {\n    const timeout = setInterval(() => {\n      getWcif(match.params.compId)\n        .then(wcif => setWcif(wcif))\n        .catch(err => setError(err.message))\n      setCurrentScreen(getIndex(currentScreenRef.current, screens.length))\n      setLoading(false)\n    }, DURATION(screens[currentScreenRef.current]))\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [match.params.compId, currentScreen, screens])\n  const classes = useStyles()\n  return (\n    <div>\n      {loading && <LinearProgress />}\n      {error && <Error message={error} />}\n      {!loading && wcif && (\n        <Dialog fullScreen open={true} TransitionComponent={Transition}>\n          <Grid\n            className={classes.root}\n            container\n            justify='space-around'\n            direction='row'\n            alignItems='center'\n          >\n            {/* <Grid item className={classes.section}>\n              <br />\n              <img\n                className={classes.logo}\n                src='https://www.worldcubeassociation.org/files/WCAlogo_notext.svg'\n                alt='wca'\n              />\n            </Grid> */}\n            <Grid item>\n              <Typography className={classes.name}>{wcif.name}</Typography>\n            </Grid>\n            <Grid item>\n              <Tabs centered value={currentScreen}>\n                {screens.map(screen => {\n                  const CurrIcon = ICON[screen]\n                  return (\n                    <Tab\n                      key={screen}\n                      label={\n                        <Typography className={classes.label}>\n                          {screen}\n                        </Typography>\n                      }\n                      icon={<CurrIcon className={classes.icon} />}\n                    />\n                  )\n                })}\n              </Tabs>\n            </Grid>\n          </Grid>\n          <div className={classes.toolbar} />\n          {getScreenFromName()}\n        </Dialog>\n      )}\n    </div>\n  )\n}\n","import React, { Component } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom'\nimport Header from '../common/Header'\nimport Footer from '../common/Footer'\n\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport blue from '@material-ui/core/colors/blue'\nimport blueGrey from '@material-ui/core/colors/blueGrey'\nimport LinearProgress from '@material-ui/core/LinearProgress'\n\nimport { getMyManagableComps, getMyUpcomingComps } from '../../server/wca-api'\nimport { isSignedIn, signOut } from '../../server/auth'\nimport history from '../../server/history'\nimport { sortArrayByDate } from '../../server/tools'\nimport Dashboard from '../Competition/Dashboard/Dashboard'\nimport LandingSignedIn from './LandingSignedIn'\nimport WelcomeLanding from './WelcomeLanding'\nimport Projector from '../Projector/Projector'\n\n// typography\nconst typography = {\n  fontFamily: [\n    'Playfair Display',\n    'Open Sans',\n    '\"Helvetica Neue\"',\n    '\"Apple Color Emoji\"',\n    '\"Segoe UI Emoji\"',\n    '\"Segoe UI Symbol\"'\n  ].join(',')\n}\n\nconst darkTheme = {\n  palette: {\n    primary: blue,\n    secondary: blueGrey,\n    type: 'dark'\n  },\n  typography: typography\n}\nconst lightTheme = {\n  palette: {\n    primary: blue,\n    secondary: blueGrey,\n    type: 'light'\n  },\n  typography: typography\n}\nclass App extends Component {\n  constructor(props) {\n    console.log('hello')\n    super(props)\n    this.state = {\n      userInfo: this.props.userInfo,\n      signedIn: isSignedIn(),\n      theme: darkTheme,\n      mobileOpen: false,\n      upcomingComps: null,\n      managableComps: null,\n      loadinAdmin: true,\n      loadingAll: true\n    }\n    if (this.state.signedIn) {\n      getMyUpcomingComps(this.state.userInfo.me.id).then(res =>\n        this.setState({\n          upcomingComps: sortArrayByDate(res.upcoming_competitions),\n          loadingAll: false\n        })\n      )\n      getMyManagableComps(this.state.userInfo.me.id).then(res =>\n        this.setState({\n          managableComps: sortArrayByDate(res),\n          loadingAdmin: false\n        })\n      )\n    }\n  }\n  setMobileOpen = () => {\n    this.setState({ mobileOpen: !this.state.mobileOpen })\n  }\n  onSignOut = () => {\n    this.setState({\n      userInfo: null,\n      signedIn: false,\n      loadingAll: true,\n      loadingAdmin: true\n    })\n    signOut()\n  }\n\n  toggleDarkTheme = () => {\n    let newTheme =\n      this.state.theme.palette.type === 'light' ? darkTheme : lightTheme\n    this.setState({\n      theme: newTheme\n    })\n  }\n\n  render() {\n    const {\n      signedIn,\n      userInfo,\n      theme,\n      mobileOpen,\n      upcomingComps,\n      managableComps,\n      loadingAdmin,\n      loadingAll\n    } = this.state\n    const muiTheme = createMuiTheme(theme)\n    return (\n      <>\n        <ThemeProvider theme={muiTheme}>\n          <CssBaseline />\n          <Router basename={process.env.PUBLIC_URL}>\n            <Header\n              userInfo={userInfo}\n              onSignOut={this.onSignOut}\n              setMobileOpen={this.setMobileOpen}\n            />\n            {(loadingAll || loadingAdmin) && signedIn && <LinearProgress />}\n            {!loadingAll && !loadingAdmin && signedIn ? (\n              <Switch>\n                <Route\n                  exact\n                  path={`${process.env.PUBLIC_URL}/competitions`}\n                  render={props => (\n                    <LandingSignedIn {...props} userInfo={userInfo} />\n                  )}\n                />\n                <Route path='/project/:compId' component={Projector} />\n\n                <Route\n                  path='/competitions/:compId/'\n                  render={props => (\n                    <Dashboard\n                      {...props}\n                      userInfo={userInfo}\n                      mobileOpen={mobileOpen}\n                      setMobileOpen={this.setMobileOpen}\n                      managableComps={managableComps}\n                      upcomingComps={upcomingComps}\n                    />\n                  )}\n                />\n                <Route exact path='/'>\n                  <Redirect to='/competitions' />\n                </Route>\n              </Switch>\n            ) : (\n              <Switch>\n                <Route\n                  exact\n                  path='/'\n                  render={props => <WelcomeLanding {...props} />}\n                />\n                <Route path='/project/:compId' component={Projector} />\n              </Switch>\n            )}\n          </Router>\n          <Footer\n            currTheme={theme.palette.type}\n            onThemeChange={this.toggleDarkTheme}\n          />\n        </ThemeProvider>\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/Landing/App'\nimport * as serviceWorker from './serviceWorker'\nimport { getMe } from './server/wca-api'\nimport { isSignedIn } from './server/auth'\nimport { initializeAuth } from './server/auth'\ninitializeAuth()\nif (isSignedIn()) {\n  getMe().then(user => {\n    ReactDOM.render(<App userInfo={user} />, document.getElementById('root'))\n  })\n} else {\n  ReactDOM.render(<App userInfo={{}} />, document.getElementById('root'))\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}